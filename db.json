{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/design-patterns.md","hash":"ebcd94b60a371a32dac33c3f8be5db6cece6cf48","modified":1678868053333},{"_id":"source/_posts/mysql-sub.md","hash":"a27ad59535cc0267b4c3a7056284ca4b7d69d340","modified":1678872721038},{"_id":"source/_posts/mysql-lock.md","hash":"a37c51eb5a87332864e71db7673ad8e457b42bc1","modified":1678869783122},{"_id":"source/_posts/mysql-wherein.md","hash":"273c3ddff29bcba49dd6f2fdd39a2d645bf08bd5","modified":1678869867958},{"_id":"source/_posts/tcp-sr.md","hash":"5214974d37b8486b460c7080521556866981edfa","modified":1678870102779},{"_id":"source/_posts/names.md","hash":"2e36a6de0b0865ad63ba58ca0ba16dd91cf53216","modified":1678869910638},{"_id":"source/_posts/tcp.md","hash":"daf9846d6cd0e39a6ddd202ab2a83f4622f025b8","modified":1678869987706},{"_id":"source/_posts/tcp-gbn.md","hash":"de8dbd0a594b3694a0aa55b7d4ca1546682a5346","modified":1678870025617},{"_id":"source/_posts/spike.md","hash":"2089d74a1607c74c74182e16740d6e1938944407","modified":1678869950357},{"_id":"source/about/index.md","hash":"3c2508b39873066621f5b374ab92554d010444c6","modified":1678870213897},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1678867606573},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1678867606623},{"_id":"node_modules/hexo-theme-fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1678867605687},{"_id":"node_modules/hexo-theme-fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1678867605751},{"_id":"node_modules/hexo-theme-fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1678867605721},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"df5b54be535593d5442cebafbea34eb9bd69b987","modified":1678867605804},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"4e3992cacd64c6888218b0346283258e8f82a27d","modified":1678867606445},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":1678867606636},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"13a6a799415fc2f6f69ebd1a399fb44426a5d641","modified":1678867606634},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"8a7f1534c228538e2ab56249d5a65829650170ed","modified":1678867606634},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a0c7984495d4f2d33b64adfa33adebbf768a5ac3","modified":1678867606636},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":1678867606639},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":1678867606638},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"1a6d415446da11dee5c5f400e7d67544fbe743ea","modified":1678867606639},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":1678867605993},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"ad6fed7b646d3ca961db83db0fbe020e3a5d42ad","modified":1678867606010},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"472d0813ca5b88000a7bc6039f33b7e27b5a3216","modified":1678867606145},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"20c2a195a109d2a263b5fa6e79cbcc62932508ad","modified":1678867606161},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"58291dfec65c36889dfce0ddc603540b67e4c598","modified":1678867606168},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"f3ae4395e751c4a02d5895e07856b1e8edfdda08","modified":1678867606210},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"2a7b49f0f9aecf07550b5a0b99242aab5654cf2b","modified":1678867606217},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"7f566edf750241e62d7c54abfbb0c504fdab850a","modified":1678867606215},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"1014b901d396f4fc445cb1ffc938d5380d894d71","modified":1678867606241},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"79e3679a7069351a6172c281b9d09f59d7580484","modified":1678867606251},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"0ad89eb7c92a822980fa9a85285e6d94ad845d1d","modified":1678867606264},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1678867606268},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"03cfa8e5f149514b57ef80dcb84eb7fea261370d","modified":1678867606475},{"_id":"node_modules/hexo-theme-fluid/README_en.md","hash":"ca8fd19a4948de1f253616a62c0e8a7d81f692f5","modified":1678867606472},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":1678867606456},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":1678867606458},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1678867606465},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"44faef3e77ab08b91e4c5c6f1cd9087a9faff443","modified":1678867606366},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1678867606392},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1678867606463},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"6c37e9f1ac1d6d00b3c32794e02e244dba942cd9","modified":1678867606430},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"cde964c8cd3217268a231de5e018a62c53c2e047","modified":1678867606343},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1678867606418},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1678867606434},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"3aa5b4ea879cd34d3a32468d88da18d72cbcc8e0","modified":1678867606437},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"b917b893b1777e6ffcb53188f9f5644510e5f20d","modified":1678867606443},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1678867606378},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1678867606419},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1678867606310},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":1678867606313},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1678867606347},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1678867606368},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1678867606402},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1678867606410},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1678867606327},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":1678867606414},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1678867606468},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/archive-list.ejs","hash":"53a4f6029373a40394a87aba9284696a71610f90","modified":1678867606129},{"_id":"node_modules/hexo-theme-fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1678867606631},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1678867606469},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1678867606432},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/beian.ejs","hash":"58b4bbe36386de4305a8da5ffd7d56802df23049","modified":1678867606153},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/css.ejs","hash":"c363829a4b80f74fc1c565e41f6dab41c95006ea","modified":1678867606184},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/footer.ejs","hash":"a62278c38a310da495d96c39abacacef266945cb","modified":1678867606199},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/head.ejs","hash":"f7f3494ed001e8cdcdc3e8a1d2cd1195cff2ded5","modified":1678867606207},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1678867606244},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/nav.ejs","hash":"e71b3c4aa263163597d31b1f91e5a1a877084cfd","modified":1678867606235},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/post-meta.ejs","hash":"32a17edadeed40da6db21d2d8031bd47d2fc9bf4","modified":1678867606246},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/scripts.ejs","hash":"0ee838b6fcd895d21a29d9d67dbb99b752d623d1","modified":1678867606258},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":1678867606260},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":1678867606262},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/toc.ejs","hash":"3d2fb5552f373e5a0c56bc356702d807bcbcb411","modified":1678867606270},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":1678867606607},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1678867605938},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1678867606478},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1678867606488},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1678867606489},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1678867606486},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1678867606305},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1678867606296},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"f1fdd512f3ef92ff5db4a49f5a3143d5ddea9858","modified":1678867606315},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1678867606338},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1678867606351},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"53987b7a668ea0623370eb83ed5311766221b557","modified":1678867606372},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"633f0142c657805359b0197f287e12ae4bcde731","modified":1678867606384},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"d058f30bd09b28769c4d8313428ff23dfc8d52dd","modified":1678867606424},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"b5fd5a2d9c463eb59318af0f47c591c485b6ad27","modified":1678867606334},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"4a43f2700e91937650bef511fd438825b001c4c6","modified":1678867606439},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"28e186c32576eb3d5d923273471a001c47fe8071","modified":1678867606348},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":1678867606345},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1678867606628},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"fd5fcb6a61ad865197a778eeae889b80484227dd","modified":1678867606350},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1678867606370},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"c1db1a4f9eca6e36b660530641e3a4fb6a30c8d8","modified":1678867606395},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1678867606177},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1678867606190},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1678867606195},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1678867606202},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1678867606221},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1678867606256},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/twikoo.ejs","hash":"1af53bc0be642610a3a4d4e7c05287854a821508","modified":1678867606272},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/utterances.ejs","hash":"e1ed6530dfd7310f91060a75766a93ac3c39be3a","modified":1678867606277},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/valine.ejs","hash":"4052ab2a8f78efa92f0fe17abe8f66135943390a","modified":1678867606280},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/waline.ejs","hash":"21e00443054802e893aac1f668b69d5bb4b39b3a","modified":1678867606285},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":1678867606096},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/math.ejs","hash":"df6941bd3b860180d01fd39ee859ed2d42f4d1f0","modified":1678867606227},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":1678867606232},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1678867606239},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/typed.ejs","hash":"e8e01c5db46b383748855452aecd70fcda99f598","modified":1678867606274},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1678867606539},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1678867606610},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1678867606549},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"08b455b848b21d57e0563b87071c4bae2b63bafe","modified":1678867606562},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1678867606497},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":1678867606518},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"80098e8354069631bde8edcd1181a53091a92949","modified":1678867606576},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"c2d8bfd04bf0734b387c049402b46a06a05fc582","modified":1678867606557},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1678867606601},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"d547ab0b91f84eb0acd0bc0c5d716ce17c30361a","modified":1678867606596},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/rewrite.styl","hash":"a2993f23701de9a83e3f428300e62c5c52b4ff4b","modified":1678867606619},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"616c1f7147078c3d532dd1cfd2af09c0c3a816f0","modified":1678867606595},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"7e32a3268accf3d524209c213e15e2d5d5e2e1a6","modified":1678867606606},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":1678867606573},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/tag_plugin.styl","hash":"b89b96c8a6a433a6f372b42710554b05cab85a24","modified":1678867606621},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post.styl","hash":"5e86487de0f16c30ca3e16460ab94b57620e31c5","modified":1678867606614},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1678867606625},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"30f8fab95a5214d79df0ccc02b937df8bd885676","modified":1678867606532},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":1678867606563},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"9f932ca3f9625c13aa5353f58319881e62c0c653","modified":1678867606579},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1678867606587},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"0ce7552dc4993926426019398d73e817cfd841a1","modified":1678867606584},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"d8011325756eb6e4ce619b3e7b4d6d80c2de8a57","modified":1678867606588},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1678867606618},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"55e10a6965462f8f62f85e75fd5e143af02a4b44","modified":1678867606620},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1678867606621},{"_id":"public/about/index.html","hash":"083d02f35a07478c20bc74e7756a944e121931cf","modified":1678872304851},{"_id":"public/2021/09/16/tcp/index.html","hash":"525340de77a5fa3345f9165bdeb4f6a426437f1e","modified":1678872304851},{"_id":"public/2021/09/09/tcp-sr/index.html","hash":"a585c85d711b637f29cb4b6e4f6c59bdeef313c4","modified":1678872304851},{"_id":"public/2018/09/29/names/index.html","hash":"26fa1aa49dde5f10aa28846d1cd42e11260ef2ee","modified":1678872304851},{"_id":"public/archives/index.html","hash":"e78903c26839fb80d070bfed00e58700baf294a6","modified":1678872709144},{"_id":"public/archives/2018/index.html","hash":"02f9dc91053e1e9397408a8387f52fd2452bf297","modified":1678872709144},{"_id":"public/archives/2018/09/index.html","hash":"55bf4145cf5471a3d232a2b7529c2de4955f214b","modified":1678872709144},{"_id":"public/archives/2021/index.html","hash":"c79e619ab56ec26b8ff2981f76cb32410fd71b3c","modified":1678872709144},{"_id":"public/archives/2022/index.html","hash":"4dbb6f9f9dace64c0f6d993fc0414e3990f6b64f","modified":1678872709144},{"_id":"public/archives/2021/09/index.html","hash":"5581412f0e21e35d50d1ee006b4c91de0d5e82b8","modified":1678872709144},{"_id":"public/archives/2022/02/index.html","hash":"a68ea2503d1c31921e7cd22a7832c077a66c39bb","modified":1678872709144},{"_id":"public/archives/2022/03/index.html","hash":"e86671357430a101424137f3f133ca6c47854950","modified":1678872709144},{"_id":"public/archives/2022/05/index.html","hash":"781f90490e8380a8075227c103211cb4395b4fb9","modified":1678872709144},{"_id":"public/categories/技术笔记/网络/index.html","hash":"5daf78a99d88cdc62e5ab3d47bf74c1d2ada429e","modified":1678872304851},{"_id":"public/categories/技术笔记/index.html","hash":"7a4111f44df55d147cb98354e0f50e351a656792","modified":1678872709144},{"_id":"public/categories/技术笔记/设计模式/index.html","hash":"f19b0ce9a4ed176f9efa1f2a14f0ebc654932143","modified":1678872304851},{"_id":"public/categories/技术笔记/MySQL/index.html","hash":"11adae5af5f8c32bd46647a56615e7fe4779f685","modified":1678872709144},{"_id":"public/categories/读书笔记/index.html","hash":"2ea4e5a7e21847242cec7bfb73561895f515a368","modified":1678872304851},{"_id":"public/tags/设计模式/index.html","hash":"a16ec9fa307871fe8def438bc8b2499355810c5c","modified":1678872304851},{"_id":"public/tags/MySQL-Lock/index.html","hash":"ac97d37ef02279b480bf6802ea3fd4caa1b61561","modified":1678872304851},{"_id":"public/tags/MySQL-索引/index.html","hash":"ba05e8120aa9229a75aaf2be95b5745b52f6c718","modified":1678872304851},{"_id":"public/tags/网络/index.html","hash":"625b5f304ec3cceeda7a970051e2e1790066e5da","modified":1678872304851},{"_id":"public/404.html","hash":"59761c1ad48a5cfa55add1f8572c39a33d64c389","modified":1678872304851},{"_id":"public/tags/index.html","hash":"479612f6bcd607a01e2f430944bfa707eb7d5749","modified":1678872709144},{"_id":"public/categories/index.html","hash":"780396d4619e5dd326c4e4cedf1fe2aada770cb2","modified":1678872709144},{"_id":"public/links/index.html","hash":"d8b506ac0641c820b2eaf9cc3551e74dc71698b5","modified":1678872304851},{"_id":"public/2022/05/17/spike/index.html","hash":"bfb73416f33b33a76aea5e13b335afc6e831c585","modified":1678872709144},{"_id":"public/2022/03/28/mysql-lock/index.html","hash":"7e6a2f0a8572e125cec949ef3e13a171dd233c14","modified":1678872304851},{"_id":"public/2022/02/13/mysql-wherein/index.html","hash":"6f3423ac456e4e5a63175f39baa2d5065595d55f","modified":1678872304851},{"_id":"public/2021/09/09/tcp-gbn/index.html","hash":"5be9540c06300bae4e58715213571eba3fd14b3a","modified":1678872304851},{"_id":"public/2021/09/08/design-patterns/index.html","hash":"6ead3d287849ef500f1f181deb5d188491148118","modified":1678872304851},{"_id":"public/index.html","hash":"9fd0ae69e6b2b6ddd840d0ebc5734189edd6ca90","modified":1678872709144},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1678872304851},{"_id":"public/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1678872304851},{"_id":"public/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1678872304851},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1678872304851},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1678872304851},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1678872304851},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1678872304851},{"_id":"public/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1678872304851},{"_id":"public/js/color-schema.js","hash":"f1fdd512f3ef92ff5db4a49f5a3143d5ddea9858","modified":1678872304851},{"_id":"public/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1678872304851},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1678872304851},{"_id":"public/js/leancloud.js","hash":"53987b7a668ea0623370eb83ed5311766221b557","modified":1678872304851},{"_id":"public/js/local-search.js","hash":"633f0142c657805359b0197f287e12ae4bcde731","modified":1678872304851},{"_id":"public/js/utils.js","hash":"4a43f2700e91937650bef511fd438825b001c4c6","modified":1678872304851},{"_id":"public/js/plugins.js","hash":"d058f30bd09b28769c4d8313428ff23dfc8d52dd","modified":1678872304851},{"_id":"public/css/main.css","hash":"63bc59b8ca4b03afa2b93883143c349d461b1052","modified":1678872304851},{"_id":"public/2023/03/15/mysql-sub/index.html","hash":"1bdbfab70218305477b4ad87a99dd3bb673bc32e","modified":1678872709144},{"_id":"public/archives/2023/index.html","hash":"6cb84d14f873ecb14d339f7681b52614e0550825","modified":1678872709144},{"_id":"public/archives/2023/03/index.html","hash":"6c47bca73100036f41bd72374bc92c4a2cd78e9f","modified":1678872709144},{"_id":"public/tags/MySQL/index.html","hash":"c2c3dca5d1446654d3494df49c6d14e19c94f531","modified":1678872709144}],"Category":[{"name":"技术笔记","_id":"clf9h81dm0003qmfy36hs8nks"},{"name":"网络","parent":"clf9h81dm0003qmfy36hs8nks","_id":"clf9h81dy000hqmfy35an4s28"},{"name":"设计模式","parent":"clf9h81dm0003qmfy36hs8nks","_id":"clf9h81dz000kqmfy1uuh8nth"},{"name":"MySQL","parent":"clf9h81dm0003qmfy36hs8nks","_id":"clf9h81e3000wqmfyhxojdaw1"},{"name":"读书笔记","_id":"clf9h81e40012qmfy4n2h149n"}],"Data":[],"Page":[{"title":"关于","layout":"about","date":"2022-04-28T09:54:32.000Z","banner_img":"https://cdn.wallpaperhub.app/cloudcache/c/2/5/0/8/a/c2508a2effcf114005605ba7285de1aa74bdfad6.jpg","_content":"\n这里是宋玲杰的博客。\n\n主要目的是为了促进自己的学习，记录工作和生活中遇到的问题以及学习心得也是为了吸引志同道合的小伙伴们来这里交流。\n\n主要内容包括：编码经验、读书笔记、生活感悟等。\n\n本博客的文章将分成以下几类：\n\n1. 技术笔记：主要可分以下几类\n   1. MySQL\n   2. 网络相关\n   3. 设计模式\n   4. 数据结构\n2. 生活随笔：主要分为以下几类\n   1. 读书笔记：读完一本书的整理和总结\n","source":"about/index.md","raw":"---\ntitle: 关于\nlayout: about\ndate: 2022-04-28 17:54:32\nbanner_img: https://cdn.wallpaperhub.app/cloudcache/c/2/5/0/8/a/c2508a2effcf114005605ba7285de1aa74bdfad6.jpg\n---\n\n这里是宋玲杰的博客。\n\n主要目的是为了促进自己的学习，记录工作和生活中遇到的问题以及学习心得也是为了吸引志同道合的小伙伴们来这里交流。\n\n主要内容包括：编码经验、读书笔记、生活感悟等。\n\n本博客的文章将分成以下几类：\n\n1. 技术笔记：主要可分以下几类\n   1. MySQL\n   2. 网络相关\n   3. 设计模式\n   4. 数据结构\n2. 生活随笔：主要分为以下几类\n   1. 读书笔记：读完一本书的整理和总结\n","updated":"2023-03-15T08:50:13.897Z","path":"about/index.html","comments":1,"_id":"clf9h81d60000qmfyai8shf6f","content":"<p>这里是宋玲杰的博客。</p>\n<p>主要目的是为了促进自己的学习，记录工作和生活中遇到的问题以及学习心得也是为了吸引志同道合的小伙伴们来这里交流。</p>\n<p>主要内容包括：编码经验、读书笔记、生活感悟等。</p>\n<p>本博客的文章将分成以下几类：</p>\n<ol>\n<li>技术笔记：主要可分以下几类<ol>\n<li>MySQL</li>\n<li>网络相关</li>\n<li>设计模式</li>\n<li>数据结构</li>\n</ol>\n</li>\n<li>生活随笔：主要分为以下几类<ol>\n<li>读书笔记：读完一本书的整理和总结</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"wordcount":161,"excerpt":"","more":"<p>这里是宋玲杰的博客。</p>\n<p>主要目的是为了促进自己的学习，记录工作和生活中遇到的问题以及学习心得也是为了吸引志同道合的小伙伴们来这里交流。</p>\n<p>主要内容包括：编码经验、读书笔记、生活感悟等。</p>\n<p>本博客的文章将分成以下几类：</p>\n<ol>\n<li>技术笔记：主要可分以下几类<ol>\n<li>MySQL</li>\n<li>网络相关</li>\n<li>设计模式</li>\n<li>数据结构</li>\n</ol>\n</li>\n<li>生活随笔：主要分为以下几类<ol>\n<li>读书笔记：读完一本书的整理和总结</li>\n</ol>\n</li>\n</ol>\n"}],"Post":[{"title":"设计模式的一些理论基础","date":"2021-09-08T02:05:23.000Z","banner_img":"https://cdn.wallpaperhub.app/cloudcache/8/6/c/9/0/2/86c902c4aa4d6f371a1998d1cf323f6270ccbb59.jpg","index_img":"https://cdn.wallpaperhub.app/cloudcache/8/6/c/9/0/2/86c902c4aa4d6f371a1998d1cf323f6270ccbb59.jpg","_content":"\n\n### 面向对象四大特性\n- 封装\n    - 封装是指类利用 public private protected 通过暴露有限方法来实现外部访问类的内部信息或数据，存在的意义：保证数据不被随意修改，提高代码可维护性，仅暴露有限的接口，提高类的易用性\n- 抽象\n    - 封装讲隐藏信息，保护数据，抽象就是指隐藏了方法的具体实现，让调用者关系类提供了哪些功能，一般通过 抽象类 或 接口类实现\n- 继承\n    - 表示 类与类之间 is-a 的关系， 提高了代码的复用性\n- 多态\n    - 是指 子类可以替换父类的实现方法，是很多设计模式，设计原则，编程技巧的实现基础\n\n### 面向对象编程一些编码思想\n\n#### 接口类和抽象类的区别\n- 接口类表示 has-a 的关系，抽象类表示 is-a的关系。抽象类也是另一种形式的继承\n\n#### 有哪些看似是面向对象 实际是面向过程的编码风格\n- 滥用 get set 方法\n    - 每个属性都有get set 方法，破坏了封装特性，过度灵活，意味着不可控\n   - 定义大而全的常量类 或 基础方法类\n    - 基于贫血模式的mvc 开发 \n\n#### 基于接口实现而非编程\n- 这句话更合理的解释是，基于抽象而非实现编程。软件开发要具有抽象意识，越抽象，越顶层，越脱离某一具体实现的设计，越能提高代码的可维护性，比如 interface payment  和  alipayPayment implements payment\n\n#### 多用组合 少用继承\n- 多层继承 会降低代卖的可读性，两层内的层级关系适用继承。组合就是，抽出公共方法 用接口 或 trait 来实现\n\n\n### 编码原则solid\n\n#### 类的单一职责（s）\n- 一个类只完成一个职责或一个功能，不要涉及大而全的类\n- 如何判断一个类的职责是否单一\n    - 代码行数过多\n    - 依赖其他类或者方法过多\n    - 私有方法过多\n    - 给类起名字比较费劲\n\n#### 开闭原则（对扩展开放，对修改关闭）(0)\n- 如何理解\n    - 新增功能时是对原有代码的基础上扩展代码（新增类/模块/方法）而非修改原有代码(方法/属性)，并不是完全杜绝修改，而是最小的改动代码代价来实现新的功能\n- 如何做到\n    - 具备扩展意识，抽象意识和封装意识，事先留好扩展点，需求变更不改变代码的整体结构，做到最小改动\n\n#### 里式替换(l)\n- 里式替换原则定义：父类函数定义了函数的约定，这里的约定是指函数声明要实现的功能，入参出参和异常的约定\n- 和多态的区别：多态是面向对象的特性和语法，是实现代码的一种思路。里式替换是一种设计原则，也是基于多态这种编程思想来实现的\n\n#### 接口隔离(i)\n- 与类的单一职责类似\n\n#### 依赖反转(d)\n- 依赖反转\n    - 上层模块不依赖底层模块，共同依赖一个抽象，比如 nginx 和 php-fpm 的关系，ngnix没有依赖php-fpm\n\n- 控制反转(ioc)\n    - 一种笼统的设计思想，主要用来指导框架层面的设计，框架来控制类的依赖而不是程序员来控制\n\n- 依赖注入\n    - 在类的外部实例化对象，不在类的内部new对象\n\n#### KISS原则 和 YAGNI DAY 迪米特法则\n   - kiss 代码保持简单，可读性好\n   - yangi 不要做过度设计\n   - day 不要有重复代码\n   - 迪米特法则 不该依赖的类不要有依赖，有依赖的类，尽量只依赖必要的接口。希望减少类之间的耦合，让类独立，每个类都应该少了解系统的其他部分。\n       - 和类的单一职责，基于接口而非实现编程都是实现高内聚 低耦合，这三个的区别是\n           - 迪米特：从类的关系出发\n           - 单一职责：从类提供的功能楚大\n           - 基于接口而非实现：从调用者的角度出发","source":"_posts/design-patterns.md","raw":"---\ntitle: 设计模式的一些理论基础\ndate: 2021-09-08 10:05:23\ntags: 设计模式\ncategories: \n  - 技术笔记\n  - 设计模式\nbanner_img: https://cdn.wallpaperhub.app/cloudcache/8/6/c/9/0/2/86c902c4aa4d6f371a1998d1cf323f6270ccbb59.jpg\nindex_img: https://cdn.wallpaperhub.app/cloudcache/8/6/c/9/0/2/86c902c4aa4d6f371a1998d1cf323f6270ccbb59.jpg\n---\n\n\n### 面向对象四大特性\n- 封装\n    - 封装是指类利用 public private protected 通过暴露有限方法来实现外部访问类的内部信息或数据，存在的意义：保证数据不被随意修改，提高代码可维护性，仅暴露有限的接口，提高类的易用性\n- 抽象\n    - 封装讲隐藏信息，保护数据，抽象就是指隐藏了方法的具体实现，让调用者关系类提供了哪些功能，一般通过 抽象类 或 接口类实现\n- 继承\n    - 表示 类与类之间 is-a 的关系， 提高了代码的复用性\n- 多态\n    - 是指 子类可以替换父类的实现方法，是很多设计模式，设计原则，编程技巧的实现基础\n\n### 面向对象编程一些编码思想\n\n#### 接口类和抽象类的区别\n- 接口类表示 has-a 的关系，抽象类表示 is-a的关系。抽象类也是另一种形式的继承\n\n#### 有哪些看似是面向对象 实际是面向过程的编码风格\n- 滥用 get set 方法\n    - 每个属性都有get set 方法，破坏了封装特性，过度灵活，意味着不可控\n   - 定义大而全的常量类 或 基础方法类\n    - 基于贫血模式的mvc 开发 \n\n#### 基于接口实现而非编程\n- 这句话更合理的解释是，基于抽象而非实现编程。软件开发要具有抽象意识，越抽象，越顶层，越脱离某一具体实现的设计，越能提高代码的可维护性，比如 interface payment  和  alipayPayment implements payment\n\n#### 多用组合 少用继承\n- 多层继承 会降低代卖的可读性，两层内的层级关系适用继承。组合就是，抽出公共方法 用接口 或 trait 来实现\n\n\n### 编码原则solid\n\n#### 类的单一职责（s）\n- 一个类只完成一个职责或一个功能，不要涉及大而全的类\n- 如何判断一个类的职责是否单一\n    - 代码行数过多\n    - 依赖其他类或者方法过多\n    - 私有方法过多\n    - 给类起名字比较费劲\n\n#### 开闭原则（对扩展开放，对修改关闭）(0)\n- 如何理解\n    - 新增功能时是对原有代码的基础上扩展代码（新增类/模块/方法）而非修改原有代码(方法/属性)，并不是完全杜绝修改，而是最小的改动代码代价来实现新的功能\n- 如何做到\n    - 具备扩展意识，抽象意识和封装意识，事先留好扩展点，需求变更不改变代码的整体结构，做到最小改动\n\n#### 里式替换(l)\n- 里式替换原则定义：父类函数定义了函数的约定，这里的约定是指函数声明要实现的功能，入参出参和异常的约定\n- 和多态的区别：多态是面向对象的特性和语法，是实现代码的一种思路。里式替换是一种设计原则，也是基于多态这种编程思想来实现的\n\n#### 接口隔离(i)\n- 与类的单一职责类似\n\n#### 依赖反转(d)\n- 依赖反转\n    - 上层模块不依赖底层模块，共同依赖一个抽象，比如 nginx 和 php-fpm 的关系，ngnix没有依赖php-fpm\n\n- 控制反转(ioc)\n    - 一种笼统的设计思想，主要用来指导框架层面的设计，框架来控制类的依赖而不是程序员来控制\n\n- 依赖注入\n    - 在类的外部实例化对象，不在类的内部new对象\n\n#### KISS原则 和 YAGNI DAY 迪米特法则\n   - kiss 代码保持简单，可读性好\n   - yangi 不要做过度设计\n   - day 不要有重复代码\n   - 迪米特法则 不该依赖的类不要有依赖，有依赖的类，尽量只依赖必要的接口。希望减少类之间的耦合，让类独立，每个类都应该少了解系统的其他部分。\n       - 和类的单一职责，基于接口而非实现编程都是实现高内聚 低耦合，这三个的区别是\n           - 迪米特：从类的关系出发\n           - 单一职责：从类提供的功能楚大\n           - 基于接口而非实现：从调用者的角度出发","slug":"design-patterns","published":1,"updated":"2023-03-15T08:14:13.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf9h81da0001qmfy4h3b2qwu","content":"<h3 id=\"面向对象四大特性\"><a href=\"#面向对象四大特性\" class=\"headerlink\" title=\"面向对象四大特性\"></a>面向对象四大特性</h3><ul>\n<li>封装<ul>\n<li>封装是指类利用 public private protected 通过暴露有限方法来实现外部访问类的内部信息或数据，存在的意义：保证数据不被随意修改，提高代码可维护性，仅暴露有限的接口，提高类的易用性</li>\n</ul>\n</li>\n<li>抽象<ul>\n<li>封装讲隐藏信息，保护数据，抽象就是指隐藏了方法的具体实现，让调用者关系类提供了哪些功能，一般通过 抽象类 或 接口类实现</li>\n</ul>\n</li>\n<li>继承<ul>\n<li>表示 类与类之间 is-a 的关系， 提高了代码的复用性</li>\n</ul>\n</li>\n<li>多态<ul>\n<li>是指 子类可以替换父类的实现方法，是很多设计模式，设计原则，编程技巧的实现基础</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"面向对象编程一些编码思想\"><a href=\"#面向对象编程一些编码思想\" class=\"headerlink\" title=\"面向对象编程一些编码思想\"></a>面向对象编程一些编码思想</h3><h4 id=\"接口类和抽象类的区别\"><a href=\"#接口类和抽象类的区别\" class=\"headerlink\" title=\"接口类和抽象类的区别\"></a>接口类和抽象类的区别</h4><ul>\n<li>接口类表示 has-a 的关系，抽象类表示 is-a的关系。抽象类也是另一种形式的继承</li>\n</ul>\n<h4 id=\"有哪些看似是面向对象-实际是面向过程的编码风格\"><a href=\"#有哪些看似是面向对象-实际是面向过程的编码风格\" class=\"headerlink\" title=\"有哪些看似是面向对象 实际是面向过程的编码风格\"></a>有哪些看似是面向对象 实际是面向过程的编码风格</h4><ul>\n<li>滥用 get set 方法<ul>\n<li>每个属性都有get set 方法，破坏了封装特性，过度灵活，意味着不可控</li>\n<li>定义大而全的常量类 或 基础方法类</li>\n<li>基于贫血模式的mvc 开发</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"基于接口实现而非编程\"><a href=\"#基于接口实现而非编程\" class=\"headerlink\" title=\"基于接口实现而非编程\"></a>基于接口实现而非编程</h4><ul>\n<li>这句话更合理的解释是，基于抽象而非实现编程。软件开发要具有抽象意识，越抽象，越顶层，越脱离某一具体实现的设计，越能提高代码的可维护性，比如 interface payment  和  alipayPayment implements payment</li>\n</ul>\n<h4 id=\"多用组合-少用继承\"><a href=\"#多用组合-少用继承\" class=\"headerlink\" title=\"多用组合 少用继承\"></a>多用组合 少用继承</h4><ul>\n<li>多层继承 会降低代卖的可读性，两层内的层级关系适用继承。组合就是，抽出公共方法 用接口 或 trait 来实现</li>\n</ul>\n<h3 id=\"编码原则solid\"><a href=\"#编码原则solid\" class=\"headerlink\" title=\"编码原则solid\"></a>编码原则solid</h3><h4 id=\"类的单一职责（s）\"><a href=\"#类的单一职责（s）\" class=\"headerlink\" title=\"类的单一职责（s）\"></a>类的单一职责（s）</h4><ul>\n<li>一个类只完成一个职责或一个功能，不要涉及大而全的类</li>\n<li>如何判断一个类的职责是否单一<ul>\n<li>代码行数过多</li>\n<li>依赖其他类或者方法过多</li>\n<li>私有方法过多</li>\n<li>给类起名字比较费劲</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"开闭原则（对扩展开放，对修改关闭）-0\"><a href=\"#开闭原则（对扩展开放，对修改关闭）-0\" class=\"headerlink\" title=\"开闭原则（对扩展开放，对修改关闭）(0)\"></a>开闭原则（对扩展开放，对修改关闭）(0)</h4><ul>\n<li>如何理解<ul>\n<li>新增功能时是对原有代码的基础上扩展代码（新增类&#x2F;模块&#x2F;方法）而非修改原有代码(方法&#x2F;属性)，并不是完全杜绝修改，而是最小的改动代码代价来实现新的功能</li>\n</ul>\n</li>\n<li>如何做到<ul>\n<li>具备扩展意识，抽象意识和封装意识，事先留好扩展点，需求变更不改变代码的整体结构，做到最小改动</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"里式替换-l\"><a href=\"#里式替换-l\" class=\"headerlink\" title=\"里式替换(l)\"></a>里式替换(l)</h4><ul>\n<li>里式替换原则定义：父类函数定义了函数的约定，这里的约定是指函数声明要实现的功能，入参出参和异常的约定</li>\n<li>和多态的区别：多态是面向对象的特性和语法，是实现代码的一种思路。里式替换是一种设计原则，也是基于多态这种编程思想来实现的</li>\n</ul>\n<h4 id=\"接口隔离-i\"><a href=\"#接口隔离-i\" class=\"headerlink\" title=\"接口隔离(i)\"></a>接口隔离(i)</h4><ul>\n<li>与类的单一职责类似</li>\n</ul>\n<h4 id=\"依赖反转-d\"><a href=\"#依赖反转-d\" class=\"headerlink\" title=\"依赖反转(d)\"></a>依赖反转(d)</h4><ul>\n<li><p>依赖反转</p>\n<ul>\n<li>上层模块不依赖底层模块，共同依赖一个抽象，比如 nginx 和 php-fpm 的关系，ngnix没有依赖php-fpm</li>\n</ul>\n</li>\n<li><p>控制反转(ioc)</p>\n<ul>\n<li>一种笼统的设计思想，主要用来指导框架层面的设计，框架来控制类的依赖而不是程序员来控制</li>\n</ul>\n</li>\n<li><p>依赖注入</p>\n<ul>\n<li>在类的外部实例化对象，不在类的内部new对象</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"KISS原则-和-YAGNI-DAY-迪米特法则\"><a href=\"#KISS原则-和-YAGNI-DAY-迪米特法则\" class=\"headerlink\" title=\"KISS原则 和 YAGNI DAY 迪米特法则\"></a>KISS原则 和 YAGNI DAY 迪米特法则</h4><ul>\n<li>kiss 代码保持简单，可读性好</li>\n<li>yangi 不要做过度设计</li>\n<li>day 不要有重复代码</li>\n<li>迪米特法则 不该依赖的类不要有依赖，有依赖的类，尽量只依赖必要的接口。希望减少类之间的耦合，让类独立，每个类都应该少了解系统的其他部分。<ul>\n<li>和类的单一职责，基于接口而非实现编程都是实现高内聚 低耦合，这三个的区别是<ul>\n<li>迪米特：从类的关系出发</li>\n<li>单一职责：从类提供的功能楚大</li>\n<li>基于接口而非实现：从调用者的角度出发</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"wordcount":1302,"excerpt":"","more":"<h3 id=\"面向对象四大特性\"><a href=\"#面向对象四大特性\" class=\"headerlink\" title=\"面向对象四大特性\"></a>面向对象四大特性</h3><ul>\n<li>封装<ul>\n<li>封装是指类利用 public private protected 通过暴露有限方法来实现外部访问类的内部信息或数据，存在的意义：保证数据不被随意修改，提高代码可维护性，仅暴露有限的接口，提高类的易用性</li>\n</ul>\n</li>\n<li>抽象<ul>\n<li>封装讲隐藏信息，保护数据，抽象就是指隐藏了方法的具体实现，让调用者关系类提供了哪些功能，一般通过 抽象类 或 接口类实现</li>\n</ul>\n</li>\n<li>继承<ul>\n<li>表示 类与类之间 is-a 的关系， 提高了代码的复用性</li>\n</ul>\n</li>\n<li>多态<ul>\n<li>是指 子类可以替换父类的实现方法，是很多设计模式，设计原则，编程技巧的实现基础</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"面向对象编程一些编码思想\"><a href=\"#面向对象编程一些编码思想\" class=\"headerlink\" title=\"面向对象编程一些编码思想\"></a>面向对象编程一些编码思想</h3><h4 id=\"接口类和抽象类的区别\"><a href=\"#接口类和抽象类的区别\" class=\"headerlink\" title=\"接口类和抽象类的区别\"></a>接口类和抽象类的区别</h4><ul>\n<li>接口类表示 has-a 的关系，抽象类表示 is-a的关系。抽象类也是另一种形式的继承</li>\n</ul>\n<h4 id=\"有哪些看似是面向对象-实际是面向过程的编码风格\"><a href=\"#有哪些看似是面向对象-实际是面向过程的编码风格\" class=\"headerlink\" title=\"有哪些看似是面向对象 实际是面向过程的编码风格\"></a>有哪些看似是面向对象 实际是面向过程的编码风格</h4><ul>\n<li>滥用 get set 方法<ul>\n<li>每个属性都有get set 方法，破坏了封装特性，过度灵活，意味着不可控</li>\n<li>定义大而全的常量类 或 基础方法类</li>\n<li>基于贫血模式的mvc 开发</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"基于接口实现而非编程\"><a href=\"#基于接口实现而非编程\" class=\"headerlink\" title=\"基于接口实现而非编程\"></a>基于接口实现而非编程</h4><ul>\n<li>这句话更合理的解释是，基于抽象而非实现编程。软件开发要具有抽象意识，越抽象，越顶层，越脱离某一具体实现的设计，越能提高代码的可维护性，比如 interface payment  和  alipayPayment implements payment</li>\n</ul>\n<h4 id=\"多用组合-少用继承\"><a href=\"#多用组合-少用继承\" class=\"headerlink\" title=\"多用组合 少用继承\"></a>多用组合 少用继承</h4><ul>\n<li>多层继承 会降低代卖的可读性，两层内的层级关系适用继承。组合就是，抽出公共方法 用接口 或 trait 来实现</li>\n</ul>\n<h3 id=\"编码原则solid\"><a href=\"#编码原则solid\" class=\"headerlink\" title=\"编码原则solid\"></a>编码原则solid</h3><h4 id=\"类的单一职责（s）\"><a href=\"#类的单一职责（s）\" class=\"headerlink\" title=\"类的单一职责（s）\"></a>类的单一职责（s）</h4><ul>\n<li>一个类只完成一个职责或一个功能，不要涉及大而全的类</li>\n<li>如何判断一个类的职责是否单一<ul>\n<li>代码行数过多</li>\n<li>依赖其他类或者方法过多</li>\n<li>私有方法过多</li>\n<li>给类起名字比较费劲</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"开闭原则（对扩展开放，对修改关闭）-0\"><a href=\"#开闭原则（对扩展开放，对修改关闭）-0\" class=\"headerlink\" title=\"开闭原则（对扩展开放，对修改关闭）(0)\"></a>开闭原则（对扩展开放，对修改关闭）(0)</h4><ul>\n<li>如何理解<ul>\n<li>新增功能时是对原有代码的基础上扩展代码（新增类&#x2F;模块&#x2F;方法）而非修改原有代码(方法&#x2F;属性)，并不是完全杜绝修改，而是最小的改动代码代价来实现新的功能</li>\n</ul>\n</li>\n<li>如何做到<ul>\n<li>具备扩展意识，抽象意识和封装意识，事先留好扩展点，需求变更不改变代码的整体结构，做到最小改动</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"里式替换-l\"><a href=\"#里式替换-l\" class=\"headerlink\" title=\"里式替换(l)\"></a>里式替换(l)</h4><ul>\n<li>里式替换原则定义：父类函数定义了函数的约定，这里的约定是指函数声明要实现的功能，入参出参和异常的约定</li>\n<li>和多态的区别：多态是面向对象的特性和语法，是实现代码的一种思路。里式替换是一种设计原则，也是基于多态这种编程思想来实现的</li>\n</ul>\n<h4 id=\"接口隔离-i\"><a href=\"#接口隔离-i\" class=\"headerlink\" title=\"接口隔离(i)\"></a>接口隔离(i)</h4><ul>\n<li>与类的单一职责类似</li>\n</ul>\n<h4 id=\"依赖反转-d\"><a href=\"#依赖反转-d\" class=\"headerlink\" title=\"依赖反转(d)\"></a>依赖反转(d)</h4><ul>\n<li><p>依赖反转</p>\n<ul>\n<li>上层模块不依赖底层模块，共同依赖一个抽象，比如 nginx 和 php-fpm 的关系，ngnix没有依赖php-fpm</li>\n</ul>\n</li>\n<li><p>控制反转(ioc)</p>\n<ul>\n<li>一种笼统的设计思想，主要用来指导框架层面的设计，框架来控制类的依赖而不是程序员来控制</li>\n</ul>\n</li>\n<li><p>依赖注入</p>\n<ul>\n<li>在类的外部实例化对象，不在类的内部new对象</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"KISS原则-和-YAGNI-DAY-迪米特法则\"><a href=\"#KISS原则-和-YAGNI-DAY-迪米特法则\" class=\"headerlink\" title=\"KISS原则 和 YAGNI DAY 迪米特法则\"></a>KISS原则 和 YAGNI DAY 迪米特法则</h4><ul>\n<li>kiss 代码保持简单，可读性好</li>\n<li>yangi 不要做过度设计</li>\n<li>day 不要有重复代码</li>\n<li>迪米特法则 不该依赖的类不要有依赖，有依赖的类，尽量只依赖必要的接口。希望减少类之间的耦合，让类独立，每个类都应该少了解系统的其他部分。<ul>\n<li>和类的单一职责，基于接口而非实现编程都是实现高内聚 低耦合，这三个的区别是<ul>\n<li>迪米特：从类的关系出发</li>\n<li>单一职责：从类提供的功能楚大</li>\n<li>基于接口而非实现：从调用者的角度出发</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"关于MySQL锁的一些思考","date":"2022-03-28T13:28:08.000Z","banner_img":"https://cdn.wallpaperhub.app/cloudcache/a/a/6/5/1/1/aa651118a1873e7be518e57da2adc2b146fd9acb.jpg","index_img":"https://cdn.wallpaperhub.app/cloudcache/3/8/9/4/f/d/3894fd0a4fc3ea7f9d6c873e8ff3110d66508c9c.jpg","_content":"\n### 锁是什么以及为什么要加锁？\n\n##### 1.1**锁**是什么\n\n​\t\t所谓的**锁**其实是一个内存中的结构，如果有锁等待的话在 information_schema.INNODB_LOCKS 看到 大致的结构是：\n\n```json\n{\n  \"lock_id\":\"锁id\",\n  \"trx_id\":\"事务id，表示这是那个事物生成的\",\n  \"lock_type\":\"锁的类型\",\n  \"lock_data\":\"加锁的记录\"\n}\n```\n\n\n\n##### 1.2锁的作用\n\n> 锁是用来解决事物并发问题带来的一些问题，如果没有并发那么也就不需要锁了\n\n事物并发分为3种情况，锁是解决并发带来的问题一种方案\n\n- 读-读并发\n\n  这种情况不会对数据造成影响，是允许出现的\n\n- 写-写并发\n\n  这种情况可能会出现脏写，任何一种隔离级别都不允许这种情况出现，解决这个问题的办法就是<font color=#FF000>**加锁**</font> ， 对同一条记录修改时需要排队执行\n\n  > 脏写：事务修改了别的事物未提交的数据。\n\n- 读-写，写-读并发\n\n  这些情况下带来的问题有带来的问题有<font color=#FF000>**脏读、不可重复读、幻读**</font>。\n\n  > 关于脏读、不可重复读、幻读的定义\n  >\n  > - 脏读：可以读取到未提交事物的数据\n  >\n  >   | 时间 | session1                                   | session2                                                     |\n  >   | ---- | ------------------------------------------ | ------------------------------------------------------------ |\n  >   | t1   | begin;                                     | SET TRANSACTION ISOLATION LEVEL   READ UNCOMMITTED;<br/>begin; |\n  >   | t2   | INSERT INTO `t4` (`id`, `a`) VALUES(2, 3); |                                                              |\n  >   | t3   |                                            | select * from t4;#是可以看到session1 未提交的写入数据        |\n  >\n  >   \n  >\n  > - 不可重复读：前后两次查询到记录的值不一样\n  >\n  >   | 时间 | session1                                                     | session2                        |\n  >   | ---- | ------------------------------------------------------------ | ------------------------------- |\n  >   | t1   | SET TRANSACTION ISOLATION LEVEL   READ COMMITTED;<br />begin; |                                 |\n  >   | t2   | select * from t4 where id =1; # id=1 a= 1                    |                                 |\n  >   | t3   |                                                              | update t4 set a=11 where id =1; |\n  >   | t4   | select * from t4 where id =1; # id=1 a= 11                   |                                 |\n  >\n  >   \n  >\n  > - 幻读：出现在查询结果集中但不在先前查询结果集中的行，就是一个事务在前后两次查询同一个范围的时候，后一次查询看到了前一次查询没有记录。 \n  >\n  >   [MySQL文档对幻读的解释]: https://dev.mysql.com/doc/refman/5.7/en/glossary.html#phantom\n  >   [幻读和写偏斜的理解]: https://github.com/Vonng/ddia/blob/master/ch7.md#写入偏斜与幻读\n  >\n  >   \n  >\n  >   | 时间 | session1                                                     | session2                                       |\n  >   | ---- | ------------------------------------------------------------ | ---------------------------------------------- |\n  >   | t1   | SET TRANSACTION ISOLATION LEVEL   READ COMMITTED;<br />begin; |                                                |\n  >   | t2   | select * from t4 where id >=1; #一条记录 id=1 a= 11          |                                                |\n  >   | t3   |                                                              | INSERT INTO `t4` (`id`, `a`)<br/>VALUES(2, 2); |\n  >   | t4   | select * from t4 where id >=1; #两条记录 id=1 a= 11，id=12a= 2 |                                                |\n  >\n  >   \n\n​\t\t解决<font color=#FF000>**脏读、不可重复读、幻读**</font>方法\n\n- 读操作利用 多版本并发控制（MVCC，Multi Version Concurrency Control ），写操作加锁。RC 和RR 在不加锁读取记录时用了MVCC，也就解决了脏读的问题。其中RC 每次查询是生成一个视图，也就导致了RC 不支持重复读和没有解决幻读，RR 是在事物启动时生成一个视图，也同时解决了可重复读和幻读\n\n  >所谓的MVCC 是基于undo log的版本链来表示每一行都有多个版本。\n  >\n  >生成视图时（生成视图的时机和隔离级别有关系）记录当前活跃的事物id、已提交事务的最大id、未开始的事物id。\n  >\n  >在事务中取一行记录取出记录中的事务id 判断是否 <= 已提交事务的最大id，如果不符合要求，根据记录中的undo log id 取之前的版本。实际情况比这些要复杂，比如果  <= 已提交事务的最大id 但是这个事物也在当前活跃的事物id里。这些大家下来可以讨论一下，这里不做过多解释了\n\n- 读写都加锁，如果某些场景我们的读操作必须读取最新值就采用这种方法，但是会阻塞写操作，性能低。脏读是因为读取别的事务未提交的记录，如果在读的时候加锁，那么别的事物无法修改更新这条记录，也就解决了脏读和不可重复读。对于幻读是指当前事物读取了一个范围内的记录，别的事物又在这个范围内写入记录，这种情况解决起来需要加 间隙锁，下边会介绍。\n\n​\t\t\n\n------\n\n\n\n### **锁的类型**\n\n##### 2.1共享锁和排他锁\n\n​\t\tInnoDB有两种类型的锁， 共享（S）锁和排他（X）锁。记录锁和表锁都有这两种类型\n\n- 共享 ( S) 锁允许持有该锁的事务读取一行 。加锁语句 SELECT ... LOCK IN SHARE MODE ，这是针对记录锁的加锁方式\n\n- 独占 ( X) 锁允许持有该锁的事务更新或删除一行 。加锁语句 SELECT ... FOR UPDATE\n\n  | 兼容性 | S锁  | X锁  |\n  | ------ | ---- | ---- |\n  | S锁    | ✅    | ❎    |\n  | X锁    | ❎    | ❎    |\n\n\n##### 2.2意向锁\n\n​\t\t在某一行上加共享/排他锁，可以称为记录锁（下边会介绍记录锁），意向锁是表级别的锁，当我们再记录上加锁时，会在表级别上加一个意向锁，意向锁之间不会冲突\n\n>意向锁的主要用在 加表锁时可以快速判断这个表中有没有针对记录的共享锁或者排他锁，这不是重点，简单了解一下吧。\n>\n>lock table t write 给表t手动加一个 排他锁\n>\n>lock table t read  给表t手动加一个 共享锁\n\n​\t\t有两种类型的意图锁：\n\n- 意向共享锁 IS 表示事务打算在表中的各个行上设置 共享 锁 *。*\n\n- 意向排他锁 IX表示事务打算对表中的各个行设置排他锁。\n\n  | 兼容性 | S    | X    | IS   | IX   |\n  | ------ | ---- | ---- | ---- | ---- |\n  | S      | ✅    | ❎    | ✅    | ❎    |\n  | X      | ❎    | ❎    | ❎    | ❎    |\n  | IS     | ✅    | ❎    | ✅    | ✅    |\n  | IX     | ❎    | ❎    | ✅    | ✅    |\n\n\n\n##### 2.3AUTO-INC Locks\n\n​\t\t自增锁是一种特殊的表级锁，比入说我们可以为表的某个列添加`AUTO_INCREMENT`属性，之后在插入记录时，可以不指定该列的值，系统会自动为它赋上递增的值。采用`AUTO-INC`锁，也就是在执行插入语句时就在表级别加一个`AUTO-INC`锁，然后为每条待插入记录的`AUTO_INCREMENT`修饰的列分配递增的值，<font color=#ff000>在该语句执行结束后，再把`AUTO-INC`锁释放掉。不会等到事物提交才释放锁。减少别的事务锁等待时间。</font>这样一个事务在持有`AUTO-INC`锁的过程中，其他事务的插入语句都要被阻塞，可以保证一个语句中分配的递增值是连续的。\n\n##### 2.4记录锁\n\n​\t\t2.2 和 2.3 是针对于表的，接下来介绍的锁是针对于记录的锁\n\n​\t\t记录锁官方的类型是：LOCK_REC_NOT_GAP，记录锁是有X 和 S 两种类型 分别用 FOR UPDATE 和 LOCK IN SHARE MODE 加锁\n\n##### 2.5间隙锁\n\n​\t\t上边我们说过MySQL 在可重复读下可以解决幻读的问题，解决方案有两种，可以使用`MVCC`方案解决，也可以采用加锁方案解决。但是在使用`加锁`方案解决时有个大问题，就是事务在第一次执行读取操作时，那些幻影记录尚不存在，我们无法给这些幻影记录加上记录锁，所以有了间隙锁，官方的类型名称为：<font color=#ff000>LOCK_GAP</font>，比如我们要给c=5 加 间隙锁，锁定的范围就是 （0，5）这个区间，不包含id=0 和 id=5 这样两行。下边这个表t中总共有 （-∞，0），（0，5），（5，10），（10，15），（15，+∞） 五个区间。\n\n​\t\t这个gap锁的仅仅是为了防止插入幻影记录而提出的，虽然有共享gap锁和独占gap锁这样的说法，但是它们起到的作用都是相同的。而且如果你对一条记录加了gap锁（不论是共享gap锁还是独占gap锁），并不会限制其他事务对这条记录加记录锁或者继续加gap锁。\n\n| Id   | c    | d    |\n| ---- | ---- | ---- |\n| 0    | 0    | 0    |\n| 5    | 5    | 5    |\n| 10   | 10   | 10   |\n| 15   | 15   | 15   |\n\n##### 2.6 Next Key锁\n\n​\t\tNext Key 本质就是一个记录锁和一个gap锁的合体，官方类型是：LOCK_ORDINARY 它既能保护该条记录，又能阻止别的事务将新记录插入被保护记录前边的间隙。比如给id=10这条记录加 Next Key锁 锁定的范围是 （5，10）这个区间加Id=10这条记录，但不包含Id=5 这条记录。next key 锁是前开后闭的。这也是加锁的基本单位。\n\n##### 2.7插入意向锁\n\n​\t\t我们说一个事务在插入一条记录时需要判断一下插入位置是不是被别的事务加了所谓的gap锁（next-key锁也包含gap锁），如果有的话，插入操作需要等待，直到拥有gap锁的那个事务提交。InnoDB规定事务在等待的时候也需要生成一个锁，表明有事务想在某个间隙中插入新记录，但是现在在等待。这种类型的锁命名为Insert Intention Locks，官方的类型名称为：LOCK_INSERT_INTENTION，我们也可以称为插入意向锁\n\n\n\n[MySQL文档对于锁的介绍]: https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html#innodb-intention-locks\n\n\n\n------\n\n\n\n### 可重复读隔离级别下的加锁\n\n准备 表t \n\n```sql\nCREATE TABLE `t` (\n  `id` int(11) NOT NULL,\n  `c` int(11) DEFAULT NULL,\n  `d` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `c` (`c`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nINSERT INTO `t` (`id`, `c`, `d`)\nVALUES\n\t(0, 0, 0),\n\t(5, 5, 5),\n\t(10, 10, 10),\n\t(15, 15, 15),\n\t(20, 20, 20),\n\t(25, 25, 25);\n\n```\n\n\n\n##### **3.1加锁的基本单位是 next key**\n\n|      | session1                                 | session2                                                     |\n| ---- | ---------------------------------------- | ------------------------------------------------------------ |\n| t1   | begin;                                   |                                                              |\n| t2   | select * from t where c = 10 for update; | begin;                                                       |\n| t3   |                                          | INSERT INTO `t` (`id`, `c`, `d`) VALUES\t(8, 8, 8); <font color=#ff000>blocked</font> |\n\n```sql\nselect * from information_schema.INNODB_TRX;\t \n```\n\n![image-20220415172906715](https://tva1.sinaimg.cn/large/e6c9d24ely1h1ajbo3xwuj20ty02nt92.jpg)\n\n​\t\n\n```sql\nselect * from information_schema.INNODB_LOCK_WAITS;\n```\n\n​\t![image-20220415172942467](https://tva1.sinaimg.cn/large/e6c9d24ely1h1ajc85fluj20bn02zgll.jpg)\n\n\n\n```sql\nselect * from information_schema.INNODB_LOCKS;\n```\n\n​\t![image-20220415173023393](https://tva1.sinaimg.cn/large/e6c9d24ely1h1ajcxxlyvj20k20353yp.jpg)\n\n\n\n##### **3.2访问到的数据会加锁**\n\n​\t  如下表中这个例子，会话一 给c=5加了共享锁，但是只给二级索引加了锁，主键索引并没有加锁因为只查询了字段c不需要查主键索引，走了索引覆盖 。\n\n​\t\t会话二可以修改成功是因为只更新了主键索引没有更新 索引c。\n\n​\t\t会话三写入失败是因为会话一c=5 这一行在索引c上 有Next key Lock。锁住了 （0,5）的区间，导致写入失败。\n\n|      | session1                                                     | session2                         | session3                                                     |\n| ---- | ------------------------------------------------------------ | -------------------------------- | ------------------------------------------------------------ |\n| t1   | begin;                                                       |                                  |                                                              |\n| t2   | select c from t where c=5 lock in share mode; #这里如果换成for update 也会对主键索引加锁，相应的会话二也会阻塞 | begin;                           | begin;                                                       |\n| t3   |                                                              | update t set d = 6 where id=5; ✅ | INSERT INTO `t` (`id`, `c`, `d`) VALUES (3, 3, 3); <font color=#ff000>blocked</font> |\n\n##### **3.3唯一索引加锁**\n\n- 等值查询 ：next key 退化为 记录锁\n\n|      | session1                                       | session2                                                     |\n| ---- | ---------------------------------------------- | ------------------------------------------------------------ |\n| t1   | begin;                                         |                                                              |\n| t2   | select * from t where id=5 lock in share mode; | begin;                                                       |\n| t3   |                                                | select * from t where id=10 for update;✅<br/>INSERT INTO `t` (`id`, `c`, `d`) VALUES (7, 7, 7);✅ |\n\n\n\n- 范围查询：满足条件的记录都会加next key  会访问到第一个不满足条件的数据位置\n\n|      | session1                                          | session2                                                     |\n| ---- | ------------------------------------------------- | ------------------------------------------------------------ |\n| t1   | begin;                                            |                                                              |\n| t2   | select * from t where id >= 5 lock in share mode; | begin;                                                       |\n| t3   |                                                   | select * from t where id = 10 for update;<br/><font color=#ff000>blocked</font> |\n\n\n\n- 唯一二级索引列无记录查询：会对 大于查询条件的第一个值 加 next key，比如 查出c=3 记录不存在 会对 id=5 这一行加上next key\n\n```sq\nALTER TABLE t DROP INDEX c, ADD UNIQUE KEY uniq_c (c);\n```\n\n|      | session3                                         | session2                                                     |\n| ---- | ------------------------------------------------ | ------------------------------------------------------------ |\n| t1   | begin;                                           |                                                              |\n| t2   | select * from t where c <= 3 lock in share mode; | begin;                                                       |\n| t3   |                                                  | select * from t where c = 5 for update;<br/><font color=#ff000>blocked</font> |\n\n```sql\nALTER TABLE t DROP INDEX uniq_c, ADD KEY c (c);\n```\n\n\n\n##### **3.4普通索引加锁**\n\n- 等值查询：向右遍历到第一个不满足条件的值 next key 退化成 gap \n\n|      | session1                                      | session2                                                     |\n| ---- | --------------------------------------------- | ------------------------------------------------------------ |\n| t1   | begin;                                        |                                                              |\n| t2   | select * from t where c=5 lock in share mode; | begin;                                                       |\n| t3   |                                               | select * from t where c=10 for update;    ✅<br/>INSERT INTO `t` (`id`, `c`, `d`) VALUES (7, 7, 7);    <font color=#ff000>blocked</font> |\n\n- 范围查询：唯一索引一样\n\n- 无记录时： 唯一索引一样\n\n\n\n##### **3.5 加锁时使用limit**\n\n​\t\t还是针对于表t，再写入一条记录 \n\n```sql\nINSERT INTO `t` (`id`, `c`, `d`) VALUES (10, 10, 10);\n```\n\n​\t\t此时索引c 的数据是\n\n| c    | 0    | 5    | 10   | 10   | 15   | 20   | 25   |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| id   | 0    | 5    | 10   | 30   | 15   | 20   | 25   |\n\n​\t\t会话二不会阻塞的原因是会话一 在语句中明确的使用limit 2，索引只对c=10 两行加了锁。同时已印证了只对访问到的记录加锁\n\n|      | session1                                        | session2                                                 |\n| ---- | ----------------------------------------------- | -------------------------------------------------------- |\n| t1   | begin;                                          |                                                          |\n| t2   | select * from t where c=10 for update  limit 2; | begin;                                                   |\n| t3   |                                                 | INSERT INTO `t` (`id`, `c`, `d`) VALUES (13, 13, 13);  ✅ |\n\n##### 3.6加锁规则总结\n\n- [ ] 加锁的基本单位是 next key\n- [ ] 访问到的数据会加锁\n- [ ] 唯一索引等值查询 next key 退化为 记录锁\n- [ ] 普通索引等值查询 向右遍历到第一个不满足条件的值 next key 退化成 gap \n- [ ] 范围查询时满足条件的记录都会加next key  会访问到第一个不满足条件的数据位置\n- [ ] 无记录的范围查询 会对 大于查询条件的第一个值 加 next key\n","source":"_posts/mysql-lock.md","raw":"---\ntitle: 关于MySQL锁的一些思考\ndate: 2022-03-28 21:28:08\ntags: MySQL,Lock\ncategories: \n  - 技术笔记\n  - MySQL\nbanner_img: https://cdn.wallpaperhub.app/cloudcache/a/a/6/5/1/1/aa651118a1873e7be518e57da2adc2b146fd9acb.jpg\nindex_img: https://cdn.wallpaperhub.app/cloudcache/3/8/9/4/f/d/3894fd0a4fc3ea7f9d6c873e8ff3110d66508c9c.jpg\n---\n\n### 锁是什么以及为什么要加锁？\n\n##### 1.1**锁**是什么\n\n​\t\t所谓的**锁**其实是一个内存中的结构，如果有锁等待的话在 information_schema.INNODB_LOCKS 看到 大致的结构是：\n\n```json\n{\n  \"lock_id\":\"锁id\",\n  \"trx_id\":\"事务id，表示这是那个事物生成的\",\n  \"lock_type\":\"锁的类型\",\n  \"lock_data\":\"加锁的记录\"\n}\n```\n\n\n\n##### 1.2锁的作用\n\n> 锁是用来解决事物并发问题带来的一些问题，如果没有并发那么也就不需要锁了\n\n事物并发分为3种情况，锁是解决并发带来的问题一种方案\n\n- 读-读并发\n\n  这种情况不会对数据造成影响，是允许出现的\n\n- 写-写并发\n\n  这种情况可能会出现脏写，任何一种隔离级别都不允许这种情况出现，解决这个问题的办法就是<font color=#FF000>**加锁**</font> ， 对同一条记录修改时需要排队执行\n\n  > 脏写：事务修改了别的事物未提交的数据。\n\n- 读-写，写-读并发\n\n  这些情况下带来的问题有带来的问题有<font color=#FF000>**脏读、不可重复读、幻读**</font>。\n\n  > 关于脏读、不可重复读、幻读的定义\n  >\n  > - 脏读：可以读取到未提交事物的数据\n  >\n  >   | 时间 | session1                                   | session2                                                     |\n  >   | ---- | ------------------------------------------ | ------------------------------------------------------------ |\n  >   | t1   | begin;                                     | SET TRANSACTION ISOLATION LEVEL   READ UNCOMMITTED;<br/>begin; |\n  >   | t2   | INSERT INTO `t4` (`id`, `a`) VALUES(2, 3); |                                                              |\n  >   | t3   |                                            | select * from t4;#是可以看到session1 未提交的写入数据        |\n  >\n  >   \n  >\n  > - 不可重复读：前后两次查询到记录的值不一样\n  >\n  >   | 时间 | session1                                                     | session2                        |\n  >   | ---- | ------------------------------------------------------------ | ------------------------------- |\n  >   | t1   | SET TRANSACTION ISOLATION LEVEL   READ COMMITTED;<br />begin; |                                 |\n  >   | t2   | select * from t4 where id =1; # id=1 a= 1                    |                                 |\n  >   | t3   |                                                              | update t4 set a=11 where id =1; |\n  >   | t4   | select * from t4 where id =1; # id=1 a= 11                   |                                 |\n  >\n  >   \n  >\n  > - 幻读：出现在查询结果集中但不在先前查询结果集中的行，就是一个事务在前后两次查询同一个范围的时候，后一次查询看到了前一次查询没有记录。 \n  >\n  >   [MySQL文档对幻读的解释]: https://dev.mysql.com/doc/refman/5.7/en/glossary.html#phantom\n  >   [幻读和写偏斜的理解]: https://github.com/Vonng/ddia/blob/master/ch7.md#写入偏斜与幻读\n  >\n  >   \n  >\n  >   | 时间 | session1                                                     | session2                                       |\n  >   | ---- | ------------------------------------------------------------ | ---------------------------------------------- |\n  >   | t1   | SET TRANSACTION ISOLATION LEVEL   READ COMMITTED;<br />begin; |                                                |\n  >   | t2   | select * from t4 where id >=1; #一条记录 id=1 a= 11          |                                                |\n  >   | t3   |                                                              | INSERT INTO `t4` (`id`, `a`)<br/>VALUES(2, 2); |\n  >   | t4   | select * from t4 where id >=1; #两条记录 id=1 a= 11，id=12a= 2 |                                                |\n  >\n  >   \n\n​\t\t解决<font color=#FF000>**脏读、不可重复读、幻读**</font>方法\n\n- 读操作利用 多版本并发控制（MVCC，Multi Version Concurrency Control ），写操作加锁。RC 和RR 在不加锁读取记录时用了MVCC，也就解决了脏读的问题。其中RC 每次查询是生成一个视图，也就导致了RC 不支持重复读和没有解决幻读，RR 是在事物启动时生成一个视图，也同时解决了可重复读和幻读\n\n  >所谓的MVCC 是基于undo log的版本链来表示每一行都有多个版本。\n  >\n  >生成视图时（生成视图的时机和隔离级别有关系）记录当前活跃的事物id、已提交事务的最大id、未开始的事物id。\n  >\n  >在事务中取一行记录取出记录中的事务id 判断是否 <= 已提交事务的最大id，如果不符合要求，根据记录中的undo log id 取之前的版本。实际情况比这些要复杂，比如果  <= 已提交事务的最大id 但是这个事物也在当前活跃的事物id里。这些大家下来可以讨论一下，这里不做过多解释了\n\n- 读写都加锁，如果某些场景我们的读操作必须读取最新值就采用这种方法，但是会阻塞写操作，性能低。脏读是因为读取别的事务未提交的记录，如果在读的时候加锁，那么别的事物无法修改更新这条记录，也就解决了脏读和不可重复读。对于幻读是指当前事物读取了一个范围内的记录，别的事物又在这个范围内写入记录，这种情况解决起来需要加 间隙锁，下边会介绍。\n\n​\t\t\n\n------\n\n\n\n### **锁的类型**\n\n##### 2.1共享锁和排他锁\n\n​\t\tInnoDB有两种类型的锁， 共享（S）锁和排他（X）锁。记录锁和表锁都有这两种类型\n\n- 共享 ( S) 锁允许持有该锁的事务读取一行 。加锁语句 SELECT ... LOCK IN SHARE MODE ，这是针对记录锁的加锁方式\n\n- 独占 ( X) 锁允许持有该锁的事务更新或删除一行 。加锁语句 SELECT ... FOR UPDATE\n\n  | 兼容性 | S锁  | X锁  |\n  | ------ | ---- | ---- |\n  | S锁    | ✅    | ❎    |\n  | X锁    | ❎    | ❎    |\n\n\n##### 2.2意向锁\n\n​\t\t在某一行上加共享/排他锁，可以称为记录锁（下边会介绍记录锁），意向锁是表级别的锁，当我们再记录上加锁时，会在表级别上加一个意向锁，意向锁之间不会冲突\n\n>意向锁的主要用在 加表锁时可以快速判断这个表中有没有针对记录的共享锁或者排他锁，这不是重点，简单了解一下吧。\n>\n>lock table t write 给表t手动加一个 排他锁\n>\n>lock table t read  给表t手动加一个 共享锁\n\n​\t\t有两种类型的意图锁：\n\n- 意向共享锁 IS 表示事务打算在表中的各个行上设置 共享 锁 *。*\n\n- 意向排他锁 IX表示事务打算对表中的各个行设置排他锁。\n\n  | 兼容性 | S    | X    | IS   | IX   |\n  | ------ | ---- | ---- | ---- | ---- |\n  | S      | ✅    | ❎    | ✅    | ❎    |\n  | X      | ❎    | ❎    | ❎    | ❎    |\n  | IS     | ✅    | ❎    | ✅    | ✅    |\n  | IX     | ❎    | ❎    | ✅    | ✅    |\n\n\n\n##### 2.3AUTO-INC Locks\n\n​\t\t自增锁是一种特殊的表级锁，比入说我们可以为表的某个列添加`AUTO_INCREMENT`属性，之后在插入记录时，可以不指定该列的值，系统会自动为它赋上递增的值。采用`AUTO-INC`锁，也就是在执行插入语句时就在表级别加一个`AUTO-INC`锁，然后为每条待插入记录的`AUTO_INCREMENT`修饰的列分配递增的值，<font color=#ff000>在该语句执行结束后，再把`AUTO-INC`锁释放掉。不会等到事物提交才释放锁。减少别的事务锁等待时间。</font>这样一个事务在持有`AUTO-INC`锁的过程中，其他事务的插入语句都要被阻塞，可以保证一个语句中分配的递增值是连续的。\n\n##### 2.4记录锁\n\n​\t\t2.2 和 2.3 是针对于表的，接下来介绍的锁是针对于记录的锁\n\n​\t\t记录锁官方的类型是：LOCK_REC_NOT_GAP，记录锁是有X 和 S 两种类型 分别用 FOR UPDATE 和 LOCK IN SHARE MODE 加锁\n\n##### 2.5间隙锁\n\n​\t\t上边我们说过MySQL 在可重复读下可以解决幻读的问题，解决方案有两种，可以使用`MVCC`方案解决，也可以采用加锁方案解决。但是在使用`加锁`方案解决时有个大问题，就是事务在第一次执行读取操作时，那些幻影记录尚不存在，我们无法给这些幻影记录加上记录锁，所以有了间隙锁，官方的类型名称为：<font color=#ff000>LOCK_GAP</font>，比如我们要给c=5 加 间隙锁，锁定的范围就是 （0，5）这个区间，不包含id=0 和 id=5 这样两行。下边这个表t中总共有 （-∞，0），（0，5），（5，10），（10，15），（15，+∞） 五个区间。\n\n​\t\t这个gap锁的仅仅是为了防止插入幻影记录而提出的，虽然有共享gap锁和独占gap锁这样的说法，但是它们起到的作用都是相同的。而且如果你对一条记录加了gap锁（不论是共享gap锁还是独占gap锁），并不会限制其他事务对这条记录加记录锁或者继续加gap锁。\n\n| Id   | c    | d    |\n| ---- | ---- | ---- |\n| 0    | 0    | 0    |\n| 5    | 5    | 5    |\n| 10   | 10   | 10   |\n| 15   | 15   | 15   |\n\n##### 2.6 Next Key锁\n\n​\t\tNext Key 本质就是一个记录锁和一个gap锁的合体，官方类型是：LOCK_ORDINARY 它既能保护该条记录，又能阻止别的事务将新记录插入被保护记录前边的间隙。比如给id=10这条记录加 Next Key锁 锁定的范围是 （5，10）这个区间加Id=10这条记录，但不包含Id=5 这条记录。next key 锁是前开后闭的。这也是加锁的基本单位。\n\n##### 2.7插入意向锁\n\n​\t\t我们说一个事务在插入一条记录时需要判断一下插入位置是不是被别的事务加了所谓的gap锁（next-key锁也包含gap锁），如果有的话，插入操作需要等待，直到拥有gap锁的那个事务提交。InnoDB规定事务在等待的时候也需要生成一个锁，表明有事务想在某个间隙中插入新记录，但是现在在等待。这种类型的锁命名为Insert Intention Locks，官方的类型名称为：LOCK_INSERT_INTENTION，我们也可以称为插入意向锁\n\n\n\n[MySQL文档对于锁的介绍]: https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html#innodb-intention-locks\n\n\n\n------\n\n\n\n### 可重复读隔离级别下的加锁\n\n准备 表t \n\n```sql\nCREATE TABLE `t` (\n  `id` int(11) NOT NULL,\n  `c` int(11) DEFAULT NULL,\n  `d` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `c` (`c`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nINSERT INTO `t` (`id`, `c`, `d`)\nVALUES\n\t(0, 0, 0),\n\t(5, 5, 5),\n\t(10, 10, 10),\n\t(15, 15, 15),\n\t(20, 20, 20),\n\t(25, 25, 25);\n\n```\n\n\n\n##### **3.1加锁的基本单位是 next key**\n\n|      | session1                                 | session2                                                     |\n| ---- | ---------------------------------------- | ------------------------------------------------------------ |\n| t1   | begin;                                   |                                                              |\n| t2   | select * from t where c = 10 for update; | begin;                                                       |\n| t3   |                                          | INSERT INTO `t` (`id`, `c`, `d`) VALUES\t(8, 8, 8); <font color=#ff000>blocked</font> |\n\n```sql\nselect * from information_schema.INNODB_TRX;\t \n```\n\n![image-20220415172906715](https://tva1.sinaimg.cn/large/e6c9d24ely1h1ajbo3xwuj20ty02nt92.jpg)\n\n​\t\n\n```sql\nselect * from information_schema.INNODB_LOCK_WAITS;\n```\n\n​\t![image-20220415172942467](https://tva1.sinaimg.cn/large/e6c9d24ely1h1ajc85fluj20bn02zgll.jpg)\n\n\n\n```sql\nselect * from information_schema.INNODB_LOCKS;\n```\n\n​\t![image-20220415173023393](https://tva1.sinaimg.cn/large/e6c9d24ely1h1ajcxxlyvj20k20353yp.jpg)\n\n\n\n##### **3.2访问到的数据会加锁**\n\n​\t  如下表中这个例子，会话一 给c=5加了共享锁，但是只给二级索引加了锁，主键索引并没有加锁因为只查询了字段c不需要查主键索引，走了索引覆盖 。\n\n​\t\t会话二可以修改成功是因为只更新了主键索引没有更新 索引c。\n\n​\t\t会话三写入失败是因为会话一c=5 这一行在索引c上 有Next key Lock。锁住了 （0,5）的区间，导致写入失败。\n\n|      | session1                                                     | session2                         | session3                                                     |\n| ---- | ------------------------------------------------------------ | -------------------------------- | ------------------------------------------------------------ |\n| t1   | begin;                                                       |                                  |                                                              |\n| t2   | select c from t where c=5 lock in share mode; #这里如果换成for update 也会对主键索引加锁，相应的会话二也会阻塞 | begin;                           | begin;                                                       |\n| t3   |                                                              | update t set d = 6 where id=5; ✅ | INSERT INTO `t` (`id`, `c`, `d`) VALUES (3, 3, 3); <font color=#ff000>blocked</font> |\n\n##### **3.3唯一索引加锁**\n\n- 等值查询 ：next key 退化为 记录锁\n\n|      | session1                                       | session2                                                     |\n| ---- | ---------------------------------------------- | ------------------------------------------------------------ |\n| t1   | begin;                                         |                                                              |\n| t2   | select * from t where id=5 lock in share mode; | begin;                                                       |\n| t3   |                                                | select * from t where id=10 for update;✅<br/>INSERT INTO `t` (`id`, `c`, `d`) VALUES (7, 7, 7);✅ |\n\n\n\n- 范围查询：满足条件的记录都会加next key  会访问到第一个不满足条件的数据位置\n\n|      | session1                                          | session2                                                     |\n| ---- | ------------------------------------------------- | ------------------------------------------------------------ |\n| t1   | begin;                                            |                                                              |\n| t2   | select * from t where id >= 5 lock in share mode; | begin;                                                       |\n| t3   |                                                   | select * from t where id = 10 for update;<br/><font color=#ff000>blocked</font> |\n\n\n\n- 唯一二级索引列无记录查询：会对 大于查询条件的第一个值 加 next key，比如 查出c=3 记录不存在 会对 id=5 这一行加上next key\n\n```sq\nALTER TABLE t DROP INDEX c, ADD UNIQUE KEY uniq_c (c);\n```\n\n|      | session3                                         | session2                                                     |\n| ---- | ------------------------------------------------ | ------------------------------------------------------------ |\n| t1   | begin;                                           |                                                              |\n| t2   | select * from t where c <= 3 lock in share mode; | begin;                                                       |\n| t3   |                                                  | select * from t where c = 5 for update;<br/><font color=#ff000>blocked</font> |\n\n```sql\nALTER TABLE t DROP INDEX uniq_c, ADD KEY c (c);\n```\n\n\n\n##### **3.4普通索引加锁**\n\n- 等值查询：向右遍历到第一个不满足条件的值 next key 退化成 gap \n\n|      | session1                                      | session2                                                     |\n| ---- | --------------------------------------------- | ------------------------------------------------------------ |\n| t1   | begin;                                        |                                                              |\n| t2   | select * from t where c=5 lock in share mode; | begin;                                                       |\n| t3   |                                               | select * from t where c=10 for update;    ✅<br/>INSERT INTO `t` (`id`, `c`, `d`) VALUES (7, 7, 7);    <font color=#ff000>blocked</font> |\n\n- 范围查询：唯一索引一样\n\n- 无记录时： 唯一索引一样\n\n\n\n##### **3.5 加锁时使用limit**\n\n​\t\t还是针对于表t，再写入一条记录 \n\n```sql\nINSERT INTO `t` (`id`, `c`, `d`) VALUES (10, 10, 10);\n```\n\n​\t\t此时索引c 的数据是\n\n| c    | 0    | 5    | 10   | 10   | 15   | 20   | 25   |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| id   | 0    | 5    | 10   | 30   | 15   | 20   | 25   |\n\n​\t\t会话二不会阻塞的原因是会话一 在语句中明确的使用limit 2，索引只对c=10 两行加了锁。同时已印证了只对访问到的记录加锁\n\n|      | session1                                        | session2                                                 |\n| ---- | ----------------------------------------------- | -------------------------------------------------------- |\n| t1   | begin;                                          |                                                          |\n| t2   | select * from t where c=10 for update  limit 2; | begin;                                                   |\n| t3   |                                                 | INSERT INTO `t` (`id`, `c`, `d`) VALUES (13, 13, 13);  ✅ |\n\n##### 3.6加锁规则总结\n\n- [ ] 加锁的基本单位是 next key\n- [ ] 访问到的数据会加锁\n- [ ] 唯一索引等值查询 next key 退化为 记录锁\n- [ ] 普通索引等值查询 向右遍历到第一个不满足条件的值 next key 退化成 gap \n- [ ] 范围查询时满足条件的记录都会加next key  会访问到第一个不满足条件的数据位置\n- [ ] 无记录的范围查询 会对 大于查询条件的第一个值 加 next key\n","slug":"mysql-lock","published":1,"updated":"2023-03-15T08:43:03.122Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf9h81dk0002qmfyblgfcn70","content":"<h3 id=\"锁是什么以及为什么要加锁？\"><a href=\"#锁是什么以及为什么要加锁？\" class=\"headerlink\" title=\"锁是什么以及为什么要加锁？\"></a>锁是什么以及为什么要加锁？</h3><h5 id=\"1-1锁是什么\"><a href=\"#1-1锁是什么\" class=\"headerlink\" title=\"1.1锁是什么\"></a>1.1<strong>锁</strong>是什么</h5><p>​\t\t所谓的<strong>锁</strong>其实是一个内存中的结构，如果有锁等待的话在 information_schema.INNODB_LOCKS 看到 大致的结构是：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><div class=\"code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>  <span class=\"hljs-attr\">&quot;lock_id&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-string\">&quot;锁id&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;trx_id&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-string\">&quot;事务id，表示这是那个事物生成的&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;lock_type&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-string\">&quot;锁的类型&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;lock_data&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-string\">&quot;加锁的记录&quot;</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"1-2锁的作用\"><a href=\"#1-2锁的作用\" class=\"headerlink\" title=\"1.2锁的作用\"></a>1.2锁的作用</h5><blockquote>\n<p>锁是用来解决事物并发问题带来的一些问题，如果没有并发那么也就不需要锁了</p>\n</blockquote>\n<p>事物并发分为3种情况，锁是解决并发带来的问题一种方案</p>\n<ul>\n<li><p>读-读并发</p>\n<p>这种情况不会对数据造成影响，是允许出现的</p>\n</li>\n<li><p>写-写并发</p>\n<p>这种情况可能会出现脏写，任何一种隔离级别都不允许这种情况出现，解决这个问题的办法就是<font color=#FF000><strong>加锁</strong></font> ， 对同一条记录修改时需要排队执行</p>\n<blockquote>\n<p>脏写：事务修改了别的事物未提交的数据。</p>\n</blockquote>\n</li>\n<li><p>读-写，写-读并发</p>\n<p>这些情况下带来的问题有带来的问题有<font color=#FF000><strong>脏读、不可重复读、幻读</strong></font>。</p>\n<blockquote>\n<p>关于脏读、不可重复读、幻读的定义</p>\n<ul>\n<li><p>脏读：可以读取到未提交事物的数据</p>\n<table>\n<thead>\n<tr>\n<th>时间</th>\n<th>session1</th>\n<th>session2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>t1</td>\n<td>begin;</td>\n<td>SET TRANSACTION ISOLATION LEVEL   READ UNCOMMITTED;<br/>begin;</td>\n</tr>\n<tr>\n<td>t2</td>\n<td>INSERT INTO <code>t4</code> (<code>id</code>, <code>a</code>) VALUES(2, 3);</td>\n<td></td>\n</tr>\n<tr>\n<td>t3</td>\n<td></td>\n<td>select * from t4;#是可以看到session1 未提交的写入数据</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>不可重复读：前后两次查询到记录的值不一样</p>\n<table>\n<thead>\n<tr>\n<th>时间</th>\n<th>session1</th>\n<th>session2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>t1</td>\n<td>SET TRANSACTION ISOLATION LEVEL   READ COMMITTED;<br />begin;</td>\n<td></td>\n</tr>\n<tr>\n<td>t2</td>\n<td>select * from t4 where id &#x3D;1; # id&#x3D;1 a&#x3D; 1</td>\n<td></td>\n</tr>\n<tr>\n<td>t3</td>\n<td></td>\n<td>update t4 set a&#x3D;11 where id &#x3D;1;</td>\n</tr>\n<tr>\n<td>t4</td>\n<td>select * from t4 where id &#x3D;1; # id&#x3D;1 a&#x3D; 11</td>\n<td></td>\n</tr>\n</tbody></table>\n</li>\n<li><p>幻读：出现在查询结果集中但不在先前查询结果集中的行，就是一个事务在前后两次查询同一个范围的时候，后一次查询看到了前一次查询没有记录。 </p>\n<table>\n<thead>\n<tr>\n<th>时间</th>\n<th>session1</th>\n<th>session2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>t1</td>\n<td>SET TRANSACTION ISOLATION LEVEL   READ COMMITTED;<br />begin;</td>\n<td></td>\n</tr>\n<tr>\n<td>t2</td>\n<td>select * from t4 where id &gt;&#x3D;1; #一条记录 id&#x3D;1 a&#x3D; 11</td>\n<td></td>\n</tr>\n<tr>\n<td>t3</td>\n<td></td>\n<td>INSERT INTO <code>t4</code> (<code>id</code>, <code>a</code>)<br/>VALUES(2, 2);</td>\n</tr>\n<tr>\n<td>t4</td>\n<td>select * from t4 where id &gt;&#x3D;1; #两条记录 id&#x3D;1 a&#x3D; 11，id&#x3D;12a&#x3D; 2</td>\n<td></td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p>​\t\t解决<font color=#FF000><strong>脏读、不可重复读、幻读</strong></font>方法</p>\n<ul>\n<li><p>读操作利用 多版本并发控制（MVCC，Multi Version Concurrency Control ），写操作加锁。RC 和RR 在不加锁读取记录时用了MVCC，也就解决了脏读的问题。其中RC 每次查询是生成一个视图，也就导致了RC 不支持重复读和没有解决幻读，RR 是在事物启动时生成一个视图，也同时解决了可重复读和幻读</p>\n<blockquote>\n<p>所谓的MVCC 是基于undo log的版本链来表示每一行都有多个版本。</p>\n<p>生成视图时（生成视图的时机和隔离级别有关系）记录当前活跃的事物id、已提交事务的最大id、未开始的事物id。</p>\n<p>在事务中取一行记录取出记录中的事务id 判断是否 &lt;&#x3D; 已提交事务的最大id，如果不符合要求，根据记录中的undo log id 取之前的版本。实际情况比这些要复杂，比如果  &lt;&#x3D; 已提交事务的最大id 但是这个事物也在当前活跃的事物id里。这些大家下来可以讨论一下，这里不做过多解释了</p>\n</blockquote>\n</li>\n<li><p>读写都加锁，如果某些场景我们的读操作必须读取最新值就采用这种方法，但是会阻塞写操作，性能低。脏读是因为读取别的事务未提交的记录，如果在读的时候加锁，那么别的事物无法修改更新这条记录，也就解决了脏读和不可重复读。对于幻读是指当前事物读取了一个范围内的记录，别的事物又在这个范围内写入记录，这种情况解决起来需要加 间隙锁，下边会介绍。</p>\n</li>\n</ul>\n<p>​\t\t</p>\n<hr>\n<h3 id=\"锁的类型\"><a href=\"#锁的类型\" class=\"headerlink\" title=\"锁的类型\"></a><strong>锁的类型</strong></h3><h5 id=\"2-1共享锁和排他锁\"><a href=\"#2-1共享锁和排他锁\" class=\"headerlink\" title=\"2.1共享锁和排他锁\"></a>2.1共享锁和排他锁</h5><p>​\t\tInnoDB有两种类型的锁， 共享（S）锁和排他（X）锁。记录锁和表锁都有这两种类型</p>\n<ul>\n<li><p>共享 ( S) 锁允许持有该锁的事务读取一行 。加锁语句 SELECT … LOCK IN SHARE MODE ，这是针对记录锁的加锁方式</p>\n</li>\n<li><p>独占 ( X) 锁允许持有该锁的事务更新或删除一行 。加锁语句 SELECT … FOR UPDATE</p>\n<table>\n<thead>\n<tr>\n<th>兼容性</th>\n<th>S锁</th>\n<th>X锁</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>S锁</td>\n<td>✅</td>\n<td>❎</td>\n</tr>\n<tr>\n<td>X锁</td>\n<td>❎</td>\n<td>❎</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h5 id=\"2-2意向锁\"><a href=\"#2-2意向锁\" class=\"headerlink\" title=\"2.2意向锁\"></a>2.2意向锁</h5><p>​\t\t在某一行上加共享&#x2F;排他锁，可以称为记录锁（下边会介绍记录锁），意向锁是表级别的锁，当我们再记录上加锁时，会在表级别上加一个意向锁，意向锁之间不会冲突</p>\n<blockquote>\n<p>意向锁的主要用在 加表锁时可以快速判断这个表中有没有针对记录的共享锁或者排他锁，这不是重点，简单了解一下吧。</p>\n<p>lock table t write 给表t手动加一个 排他锁</p>\n<p>lock table t read  给表t手动加一个 共享锁</p>\n</blockquote>\n<p>​\t\t有两种类型的意图锁：</p>\n<ul>\n<li><p>意向共享锁 IS 表示事务打算在表中的各个行上设置 共享 锁 <em>。</em></p>\n</li>\n<li><p>意向排他锁 IX表示事务打算对表中的各个行设置排他锁。</p>\n<table>\n<thead>\n<tr>\n<th>兼容性</th>\n<th>S</th>\n<th>X</th>\n<th>IS</th>\n<th>IX</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>S</td>\n<td>✅</td>\n<td>❎</td>\n<td>✅</td>\n<td>❎</td>\n</tr>\n<tr>\n<td>X</td>\n<td>❎</td>\n<td>❎</td>\n<td>❎</td>\n<td>❎</td>\n</tr>\n<tr>\n<td>IS</td>\n<td>✅</td>\n<td>❎</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>IX</td>\n<td>❎</td>\n<td>❎</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h5 id=\"2-3AUTO-INC-Locks\"><a href=\"#2-3AUTO-INC-Locks\" class=\"headerlink\" title=\"2.3AUTO-INC Locks\"></a>2.3AUTO-INC Locks</h5><p>​\t\t自增锁是一种特殊的表级锁，比入说我们可以为表的某个列添加<code>AUTO_INCREMENT</code>属性，之后在插入记录时，可以不指定该列的值，系统会自动为它赋上递增的值。采用<code>AUTO-INC</code>锁，也就是在执行插入语句时就在表级别加一个<code>AUTO-INC</code>锁，然后为每条待插入记录的<code>AUTO_INCREMENT</code>修饰的列分配递增的值，<font color=#ff000>在该语句执行结束后，再把<code>AUTO-INC</code>锁释放掉。不会等到事物提交才释放锁。减少别的事务锁等待时间。</font>这样一个事务在持有<code>AUTO-INC</code>锁的过程中，其他事务的插入语句都要被阻塞，可以保证一个语句中分配的递增值是连续的。</p>\n<h5 id=\"2-4记录锁\"><a href=\"#2-4记录锁\" class=\"headerlink\" title=\"2.4记录锁\"></a>2.4记录锁</h5><p>​\t\t2.2 和 2.3 是针对于表的，接下来介绍的锁是针对于记录的锁</p>\n<p>​\t\t记录锁官方的类型是：LOCK_REC_NOT_GAP，记录锁是有X 和 S 两种类型 分别用 FOR UPDATE 和 LOCK IN SHARE MODE 加锁</p>\n<h5 id=\"2-5间隙锁\"><a href=\"#2-5间隙锁\" class=\"headerlink\" title=\"2.5间隙锁\"></a>2.5间隙锁</h5><p>​\t\t上边我们说过MySQL 在可重复读下可以解决幻读的问题，解决方案有两种，可以使用<code>MVCC</code>方案解决，也可以采用加锁方案解决。但是在使用<code>加锁</code>方案解决时有个大问题，就是事务在第一次执行读取操作时，那些幻影记录尚不存在，我们无法给这些幻影记录加上记录锁，所以有了间隙锁，官方的类型名称为：<font color=#ff000>LOCK_GAP</font>，比如我们要给c&#x3D;5 加 间隙锁，锁定的范围就是 （0，5）这个区间，不包含id&#x3D;0 和 id&#x3D;5 这样两行。下边这个表t中总共有 （-∞，0），（0，5），（5，10），（10，15），（15，+∞） 五个区间。</p>\n<p>​\t\t这个gap锁的仅仅是为了防止插入幻影记录而提出的，虽然有共享gap锁和独占gap锁这样的说法，但是它们起到的作用都是相同的。而且如果你对一条记录加了gap锁（不论是共享gap锁还是独占gap锁），并不会限制其他事务对这条记录加记录锁或者继续加gap锁。</p>\n<table>\n<thead>\n<tr>\n<th>Id</th>\n<th>c</th>\n<th>d</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n</tbody></table>\n<h5 id=\"2-6-Next-Key锁\"><a href=\"#2-6-Next-Key锁\" class=\"headerlink\" title=\"2.6 Next Key锁\"></a>2.6 Next Key锁</h5><p>​\t\tNext Key 本质就是一个记录锁和一个gap锁的合体，官方类型是：LOCK_ORDINARY 它既能保护该条记录，又能阻止别的事务将新记录插入被保护记录前边的间隙。比如给id&#x3D;10这条记录加 Next Key锁 锁定的范围是 （5，10）这个区间加Id&#x3D;10这条记录，但不包含Id&#x3D;5 这条记录。next key 锁是前开后闭的。这也是加锁的基本单位。</p>\n<h5 id=\"2-7插入意向锁\"><a href=\"#2-7插入意向锁\" class=\"headerlink\" title=\"2.7插入意向锁\"></a>2.7插入意向锁</h5><p>​\t\t我们说一个事务在插入一条记录时需要判断一下插入位置是不是被别的事务加了所谓的gap锁（next-key锁也包含gap锁），如果有的话，插入操作需要等待，直到拥有gap锁的那个事务提交。InnoDB规定事务在等待的时候也需要生成一个锁，表明有事务想在某个间隙中插入新记录，但是现在在等待。这种类型的锁命名为Insert Intention Locks，官方的类型名称为：LOCK_INSERT_INTENTION，我们也可以称为插入意向锁</p>\n<hr>\n<h3 id=\"可重复读隔离级别下的加锁\"><a href=\"#可重复读隔离级别下的加锁\" class=\"headerlink\" title=\"可重复读隔离级别下的加锁\"></a>可重复读隔离级别下的加锁</h3><p>准备 表t </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> `t` (<br>  `id` <span class=\"hljs-type\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,<br>  `c` <span class=\"hljs-type\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span>,<br>  `d` <span class=\"hljs-type\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span>,<br>  <span class=\"hljs-keyword\">PRIMARY</span> KEY (`id`),<br>  KEY `c` (`c`)<br>) ENGINE<span class=\"hljs-operator\">=</span>InnoDB <span class=\"hljs-keyword\">DEFAULT</span> CHARSET<span class=\"hljs-operator\">=</span>utf8;<br><br><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `t` (`id`, `c`, `d`)<br><span class=\"hljs-keyword\">VALUES</span><br>\t(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>),<br>\t(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>),<br>\t(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>),<br>\t(<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">15</span>),<br>\t(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">20</span>),<br>\t(<span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">25</span>);<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"3-1加锁的基本单位是-next-key\"><a href=\"#3-1加锁的基本单位是-next-key\" class=\"headerlink\" title=\"3.1加锁的基本单位是 next key\"></a><strong>3.1加锁的基本单位是 next key</strong></h5><table>\n<thead>\n<tr>\n<th></th>\n<th>session1</th>\n<th>session2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>t1</td>\n<td>begin;</td>\n<td></td>\n</tr>\n<tr>\n<td>t2</td>\n<td>select * from t where c &#x3D; 10 for update;</td>\n<td>begin;</td>\n</tr>\n<tr>\n<td>t3</td>\n<td></td>\n<td>INSERT INTO <code>t</code> (<code>id</code>, <code>c</code>, <code>d</code>) VALUES\t(8, 8, 8); <font color=#ff000>blocked</font></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> information_schema.INNODB_TRX;\t <br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1h1ajbo3xwuj20ty02nt92.jpg\" alt=\"image-20220415172906715\"></p>\n<p>​\t</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> information_schema.INNODB_LOCK_WAITS;<br></code></pre></td></tr></table></figure>\n\n<p>​\t<img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1h1ajc85fluj20bn02zgll.jpg\" alt=\"image-20220415172942467\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> information_schema.INNODB_LOCKS;<br></code></pre></td></tr></table></figure>\n\n<p>​\t<img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1h1ajcxxlyvj20k20353yp.jpg\" alt=\"image-20220415173023393\"></p>\n<h5 id=\"3-2访问到的数据会加锁\"><a href=\"#3-2访问到的数据会加锁\" class=\"headerlink\" title=\"3.2访问到的数据会加锁\"></a><strong>3.2访问到的数据会加锁</strong></h5><p>​\t  如下表中这个例子，会话一 给c&#x3D;5加了共享锁，但是只给二级索引加了锁，主键索引并没有加锁因为只查询了字段c不需要查主键索引，走了索引覆盖 。</p>\n<p>​\t\t会话二可以修改成功是因为只更新了主键索引没有更新 索引c。</p>\n<p>​\t\t会话三写入失败是因为会话一c&#x3D;5 这一行在索引c上 有Next key Lock。锁住了 （0,5）的区间，导致写入失败。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>session1</th>\n<th>session2</th>\n<th>session3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>t1</td>\n<td>begin;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>t2</td>\n<td>select c from t where c&#x3D;5 lock in share mode; #这里如果换成for update 也会对主键索引加锁，相应的会话二也会阻塞</td>\n<td>begin;</td>\n<td>begin;</td>\n</tr>\n<tr>\n<td>t3</td>\n<td></td>\n<td>update t set d &#x3D; 6 where id&#x3D;5; ✅</td>\n<td>INSERT INTO <code>t</code> (<code>id</code>, <code>c</code>, <code>d</code>) VALUES (3, 3, 3); <font color=#ff000>blocked</font></td>\n</tr>\n</tbody></table>\n<h5 id=\"3-3唯一索引加锁\"><a href=\"#3-3唯一索引加锁\" class=\"headerlink\" title=\"3.3唯一索引加锁\"></a><strong>3.3唯一索引加锁</strong></h5><ul>\n<li>等值查询 ：next key 退化为 记录锁</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>session1</th>\n<th>session2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>t1</td>\n<td>begin;</td>\n<td></td>\n</tr>\n<tr>\n<td>t2</td>\n<td>select * from t where id&#x3D;5 lock in share mode;</td>\n<td>begin;</td>\n</tr>\n<tr>\n<td>t3</td>\n<td></td>\n<td>select * from t where id&#x3D;10 for update;✅<br/>INSERT INTO <code>t</code> (<code>id</code>, <code>c</code>, <code>d</code>) VALUES (7, 7, 7);✅</td>\n</tr>\n</tbody></table>\n<ul>\n<li>范围查询：满足条件的记录都会加next key  会访问到第一个不满足条件的数据位置</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>session1</th>\n<th>session2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>t1</td>\n<td>begin;</td>\n<td></td>\n</tr>\n<tr>\n<td>t2</td>\n<td>select * from t where id &gt;&#x3D; 5 lock in share mode;</td>\n<td>begin;</td>\n</tr>\n<tr>\n<td>t3</td>\n<td></td>\n<td>select * from t where id &#x3D; 10 for update;<br/><font color=#ff000>blocked</font></td>\n</tr>\n</tbody></table>\n<ul>\n<li>唯一二级索引列无记录查询：会对 大于查询条件的第一个值 加 next key，比如 查出c&#x3D;3 记录不存在 会对 id&#x3D;5 这一行加上next key</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sq\">ALTER TABLE t DROP INDEX c, ADD UNIQUE KEY uniq_c (c);<br></code></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th></th>\n<th>session3</th>\n<th>session2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>t1</td>\n<td>begin;</td>\n<td></td>\n</tr>\n<tr>\n<td>t2</td>\n<td>select * from t where c &lt;&#x3D; 3 lock in share mode;</td>\n<td>begin;</td>\n</tr>\n<tr>\n<td>t3</td>\n<td></td>\n<td>select * from t where c &#x3D; 5 for update;<br/><font color=#ff000>blocked</font></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> t <span class=\"hljs-keyword\">DROP</span> INDEX uniq_c, <span class=\"hljs-keyword\">ADD</span> KEY c (c);<br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"3-4普通索引加锁\"><a href=\"#3-4普通索引加锁\" class=\"headerlink\" title=\"3.4普通索引加锁\"></a><strong>3.4普通索引加锁</strong></h5><ul>\n<li>等值查询：向右遍历到第一个不满足条件的值 next key 退化成 gap</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>session1</th>\n<th>session2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>t1</td>\n<td>begin;</td>\n<td></td>\n</tr>\n<tr>\n<td>t2</td>\n<td>select * from t where c&#x3D;5 lock in share mode;</td>\n<td>begin;</td>\n</tr>\n<tr>\n<td>t3</td>\n<td></td>\n<td>select * from t where c&#x3D;10 for update;    ✅<br/>INSERT INTO <code>t</code> (<code>id</code>, <code>c</code>, <code>d</code>) VALUES (7, 7, 7);    <font color=#ff000>blocked</font></td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>范围查询：唯一索引一样</p>\n</li>\n<li><p>无记录时： 唯一索引一样</p>\n</li>\n</ul>\n<h5 id=\"3-5-加锁时使用limit\"><a href=\"#3-5-加锁时使用limit\" class=\"headerlink\" title=\"3.5 加锁时使用limit\"></a><strong>3.5 加锁时使用limit</strong></h5><p>​\t\t还是针对于表t，再写入一条记录 </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `t` (`id`, `c`, `d`) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>);<br></code></pre></td></tr></table></figure>\n\n<p>​\t\t此时索引c 的数据是</p>\n<table>\n<thead>\n<tr>\n<th>c</th>\n<th>0</th>\n<th>5</th>\n<th>10</th>\n<th>10</th>\n<th>15</th>\n<th>20</th>\n<th>25</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>0</td>\n<td>5</td>\n<td>10</td>\n<td>30</td>\n<td>15</td>\n<td>20</td>\n<td>25</td>\n</tr>\n</tbody></table>\n<p>​\t\t会话二不会阻塞的原因是会话一 在语句中明确的使用limit 2，索引只对c&#x3D;10 两行加了锁。同时已印证了只对访问到的记录加锁</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>session1</th>\n<th>session2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>t1</td>\n<td>begin;</td>\n<td></td>\n</tr>\n<tr>\n<td>t2</td>\n<td>select * from t where c&#x3D;10 for update  limit 2;</td>\n<td>begin;</td>\n</tr>\n<tr>\n<td>t3</td>\n<td></td>\n<td>INSERT INTO <code>t</code> (<code>id</code>, <code>c</code>, <code>d</code>) VALUES (13, 13, 13);  ✅</td>\n</tr>\n</tbody></table>\n<h5 id=\"3-6加锁规则总结\"><a href=\"#3-6加锁规则总结\" class=\"headerlink\" title=\"3.6加锁规则总结\"></a>3.6加锁规则总结</h5><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 加锁的基本单位是 next key</li>\n<li><input disabled=\"\" type=\"checkbox\"> 访问到的数据会加锁</li>\n<li><input disabled=\"\" type=\"checkbox\"> 唯一索引等值查询 next key 退化为 记录锁</li>\n<li><input disabled=\"\" type=\"checkbox\"> 普通索引等值查询 向右遍历到第一个不满足条件的值 next key 退化成 gap </li>\n<li><input disabled=\"\" type=\"checkbox\"> 范围查询时满足条件的记录都会加next key  会访问到第一个不满足条件的数据位置</li>\n<li><input disabled=\"\" type=\"checkbox\"> 无记录的范围查询 会对 大于查询条件的第一个值 加 next key</li>\n</ul>\n","site":{"data":{}},"wordcount":5631,"excerpt":"","more":"<h3 id=\"锁是什么以及为什么要加锁？\"><a href=\"#锁是什么以及为什么要加锁？\" class=\"headerlink\" title=\"锁是什么以及为什么要加锁？\"></a>锁是什么以及为什么要加锁？</h3><h5 id=\"1-1锁是什么\"><a href=\"#1-1锁是什么\" class=\"headerlink\" title=\"1.1锁是什么\"></a>1.1<strong>锁</strong>是什么</h5><p>​\t\t所谓的<strong>锁</strong>其实是一个内存中的结构，如果有锁等待的话在 information_schema.INNODB_LOCKS 看到 大致的结构是：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>  <span class=\"hljs-attr\">&quot;lock_id&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-string\">&quot;锁id&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;trx_id&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-string\">&quot;事务id，表示这是那个事物生成的&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;lock_type&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-string\">&quot;锁的类型&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;lock_data&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-string\">&quot;加锁的记录&quot;</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"1-2锁的作用\"><a href=\"#1-2锁的作用\" class=\"headerlink\" title=\"1.2锁的作用\"></a>1.2锁的作用</h5><blockquote>\n<p>锁是用来解决事物并发问题带来的一些问题，如果没有并发那么也就不需要锁了</p>\n</blockquote>\n<p>事物并发分为3种情况，锁是解决并发带来的问题一种方案</p>\n<ul>\n<li><p>读-读并发</p>\n<p>这种情况不会对数据造成影响，是允许出现的</p>\n</li>\n<li><p>写-写并发</p>\n<p>这种情况可能会出现脏写，任何一种隔离级别都不允许这种情况出现，解决这个问题的办法就是<font color=#FF000><strong>加锁</strong></font> ， 对同一条记录修改时需要排队执行</p>\n<blockquote>\n<p>脏写：事务修改了别的事物未提交的数据。</p>\n</blockquote>\n</li>\n<li><p>读-写，写-读并发</p>\n<p>这些情况下带来的问题有带来的问题有<font color=#FF000><strong>脏读、不可重复读、幻读</strong></font>。</p>\n<blockquote>\n<p>关于脏读、不可重复读、幻读的定义</p>\n<ul>\n<li><p>脏读：可以读取到未提交事物的数据</p>\n<table>\n<thead>\n<tr>\n<th>时间</th>\n<th>session1</th>\n<th>session2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>t1</td>\n<td>begin;</td>\n<td>SET TRANSACTION ISOLATION LEVEL   READ UNCOMMITTED;<br/>begin;</td>\n</tr>\n<tr>\n<td>t2</td>\n<td>INSERT INTO <code>t4</code> (<code>id</code>, <code>a</code>) VALUES(2, 3);</td>\n<td></td>\n</tr>\n<tr>\n<td>t3</td>\n<td></td>\n<td>select * from t4;#是可以看到session1 未提交的写入数据</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>不可重复读：前后两次查询到记录的值不一样</p>\n<table>\n<thead>\n<tr>\n<th>时间</th>\n<th>session1</th>\n<th>session2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>t1</td>\n<td>SET TRANSACTION ISOLATION LEVEL   READ COMMITTED;<br />begin;</td>\n<td></td>\n</tr>\n<tr>\n<td>t2</td>\n<td>select * from t4 where id &#x3D;1; # id&#x3D;1 a&#x3D; 1</td>\n<td></td>\n</tr>\n<tr>\n<td>t3</td>\n<td></td>\n<td>update t4 set a&#x3D;11 where id &#x3D;1;</td>\n</tr>\n<tr>\n<td>t4</td>\n<td>select * from t4 where id &#x3D;1; # id&#x3D;1 a&#x3D; 11</td>\n<td></td>\n</tr>\n</tbody></table>\n</li>\n<li><p>幻读：出现在查询结果集中但不在先前查询结果集中的行，就是一个事务在前后两次查询同一个范围的时候，后一次查询看到了前一次查询没有记录。 </p>\n<table>\n<thead>\n<tr>\n<th>时间</th>\n<th>session1</th>\n<th>session2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>t1</td>\n<td>SET TRANSACTION ISOLATION LEVEL   READ COMMITTED;<br />begin;</td>\n<td></td>\n</tr>\n<tr>\n<td>t2</td>\n<td>select * from t4 where id &gt;&#x3D;1; #一条记录 id&#x3D;1 a&#x3D; 11</td>\n<td></td>\n</tr>\n<tr>\n<td>t3</td>\n<td></td>\n<td>INSERT INTO <code>t4</code> (<code>id</code>, <code>a</code>)<br/>VALUES(2, 2);</td>\n</tr>\n<tr>\n<td>t4</td>\n<td>select * from t4 where id &gt;&#x3D;1; #两条记录 id&#x3D;1 a&#x3D; 11，id&#x3D;12a&#x3D; 2</td>\n<td></td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p>​\t\t解决<font color=#FF000><strong>脏读、不可重复读、幻读</strong></font>方法</p>\n<ul>\n<li><p>读操作利用 多版本并发控制（MVCC，Multi Version Concurrency Control ），写操作加锁。RC 和RR 在不加锁读取记录时用了MVCC，也就解决了脏读的问题。其中RC 每次查询是生成一个视图，也就导致了RC 不支持重复读和没有解决幻读，RR 是在事物启动时生成一个视图，也同时解决了可重复读和幻读</p>\n<blockquote>\n<p>所谓的MVCC 是基于undo log的版本链来表示每一行都有多个版本。</p>\n<p>生成视图时（生成视图的时机和隔离级别有关系）记录当前活跃的事物id、已提交事务的最大id、未开始的事物id。</p>\n<p>在事务中取一行记录取出记录中的事务id 判断是否 &lt;&#x3D; 已提交事务的最大id，如果不符合要求，根据记录中的undo log id 取之前的版本。实际情况比这些要复杂，比如果  &lt;&#x3D; 已提交事务的最大id 但是这个事物也在当前活跃的事物id里。这些大家下来可以讨论一下，这里不做过多解释了</p>\n</blockquote>\n</li>\n<li><p>读写都加锁，如果某些场景我们的读操作必须读取最新值就采用这种方法，但是会阻塞写操作，性能低。脏读是因为读取别的事务未提交的记录，如果在读的时候加锁，那么别的事物无法修改更新这条记录，也就解决了脏读和不可重复读。对于幻读是指当前事物读取了一个范围内的记录，别的事物又在这个范围内写入记录，这种情况解决起来需要加 间隙锁，下边会介绍。</p>\n</li>\n</ul>\n<p>​\t\t</p>\n<hr>\n<h3 id=\"锁的类型\"><a href=\"#锁的类型\" class=\"headerlink\" title=\"锁的类型\"></a><strong>锁的类型</strong></h3><h5 id=\"2-1共享锁和排他锁\"><a href=\"#2-1共享锁和排他锁\" class=\"headerlink\" title=\"2.1共享锁和排他锁\"></a>2.1共享锁和排他锁</h5><p>​\t\tInnoDB有两种类型的锁， 共享（S）锁和排他（X）锁。记录锁和表锁都有这两种类型</p>\n<ul>\n<li><p>共享 ( S) 锁允许持有该锁的事务读取一行 。加锁语句 SELECT … LOCK IN SHARE MODE ，这是针对记录锁的加锁方式</p>\n</li>\n<li><p>独占 ( X) 锁允许持有该锁的事务更新或删除一行 。加锁语句 SELECT … FOR UPDATE</p>\n<table>\n<thead>\n<tr>\n<th>兼容性</th>\n<th>S锁</th>\n<th>X锁</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>S锁</td>\n<td>✅</td>\n<td>❎</td>\n</tr>\n<tr>\n<td>X锁</td>\n<td>❎</td>\n<td>❎</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h5 id=\"2-2意向锁\"><a href=\"#2-2意向锁\" class=\"headerlink\" title=\"2.2意向锁\"></a>2.2意向锁</h5><p>​\t\t在某一行上加共享&#x2F;排他锁，可以称为记录锁（下边会介绍记录锁），意向锁是表级别的锁，当我们再记录上加锁时，会在表级别上加一个意向锁，意向锁之间不会冲突</p>\n<blockquote>\n<p>意向锁的主要用在 加表锁时可以快速判断这个表中有没有针对记录的共享锁或者排他锁，这不是重点，简单了解一下吧。</p>\n<p>lock table t write 给表t手动加一个 排他锁</p>\n<p>lock table t read  给表t手动加一个 共享锁</p>\n</blockquote>\n<p>​\t\t有两种类型的意图锁：</p>\n<ul>\n<li><p>意向共享锁 IS 表示事务打算在表中的各个行上设置 共享 锁 <em>。</em></p>\n</li>\n<li><p>意向排他锁 IX表示事务打算对表中的各个行设置排他锁。</p>\n<table>\n<thead>\n<tr>\n<th>兼容性</th>\n<th>S</th>\n<th>X</th>\n<th>IS</th>\n<th>IX</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>S</td>\n<td>✅</td>\n<td>❎</td>\n<td>✅</td>\n<td>❎</td>\n</tr>\n<tr>\n<td>X</td>\n<td>❎</td>\n<td>❎</td>\n<td>❎</td>\n<td>❎</td>\n</tr>\n<tr>\n<td>IS</td>\n<td>✅</td>\n<td>❎</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>IX</td>\n<td>❎</td>\n<td>❎</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h5 id=\"2-3AUTO-INC-Locks\"><a href=\"#2-3AUTO-INC-Locks\" class=\"headerlink\" title=\"2.3AUTO-INC Locks\"></a>2.3AUTO-INC Locks</h5><p>​\t\t自增锁是一种特殊的表级锁，比入说我们可以为表的某个列添加<code>AUTO_INCREMENT</code>属性，之后在插入记录时，可以不指定该列的值，系统会自动为它赋上递增的值。采用<code>AUTO-INC</code>锁，也就是在执行插入语句时就在表级别加一个<code>AUTO-INC</code>锁，然后为每条待插入记录的<code>AUTO_INCREMENT</code>修饰的列分配递增的值，<font color=#ff000>在该语句执行结束后，再把<code>AUTO-INC</code>锁释放掉。不会等到事物提交才释放锁。减少别的事务锁等待时间。</font>这样一个事务在持有<code>AUTO-INC</code>锁的过程中，其他事务的插入语句都要被阻塞，可以保证一个语句中分配的递增值是连续的。</p>\n<h5 id=\"2-4记录锁\"><a href=\"#2-4记录锁\" class=\"headerlink\" title=\"2.4记录锁\"></a>2.4记录锁</h5><p>​\t\t2.2 和 2.3 是针对于表的，接下来介绍的锁是针对于记录的锁</p>\n<p>​\t\t记录锁官方的类型是：LOCK_REC_NOT_GAP，记录锁是有X 和 S 两种类型 分别用 FOR UPDATE 和 LOCK IN SHARE MODE 加锁</p>\n<h5 id=\"2-5间隙锁\"><a href=\"#2-5间隙锁\" class=\"headerlink\" title=\"2.5间隙锁\"></a>2.5间隙锁</h5><p>​\t\t上边我们说过MySQL 在可重复读下可以解决幻读的问题，解决方案有两种，可以使用<code>MVCC</code>方案解决，也可以采用加锁方案解决。但是在使用<code>加锁</code>方案解决时有个大问题，就是事务在第一次执行读取操作时，那些幻影记录尚不存在，我们无法给这些幻影记录加上记录锁，所以有了间隙锁，官方的类型名称为：<font color=#ff000>LOCK_GAP</font>，比如我们要给c&#x3D;5 加 间隙锁，锁定的范围就是 （0，5）这个区间，不包含id&#x3D;0 和 id&#x3D;5 这样两行。下边这个表t中总共有 （-∞，0），（0，5），（5，10），（10，15），（15，+∞） 五个区间。</p>\n<p>​\t\t这个gap锁的仅仅是为了防止插入幻影记录而提出的，虽然有共享gap锁和独占gap锁这样的说法，但是它们起到的作用都是相同的。而且如果你对一条记录加了gap锁（不论是共享gap锁还是独占gap锁），并不会限制其他事务对这条记录加记录锁或者继续加gap锁。</p>\n<table>\n<thead>\n<tr>\n<th>Id</th>\n<th>c</th>\n<th>d</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>10</td>\n<td>10</td>\n<td>10</td>\n</tr>\n<tr>\n<td>15</td>\n<td>15</td>\n<td>15</td>\n</tr>\n</tbody></table>\n<h5 id=\"2-6-Next-Key锁\"><a href=\"#2-6-Next-Key锁\" class=\"headerlink\" title=\"2.6 Next Key锁\"></a>2.6 Next Key锁</h5><p>​\t\tNext Key 本质就是一个记录锁和一个gap锁的合体，官方类型是：LOCK_ORDINARY 它既能保护该条记录，又能阻止别的事务将新记录插入被保护记录前边的间隙。比如给id&#x3D;10这条记录加 Next Key锁 锁定的范围是 （5，10）这个区间加Id&#x3D;10这条记录，但不包含Id&#x3D;5 这条记录。next key 锁是前开后闭的。这也是加锁的基本单位。</p>\n<h5 id=\"2-7插入意向锁\"><a href=\"#2-7插入意向锁\" class=\"headerlink\" title=\"2.7插入意向锁\"></a>2.7插入意向锁</h5><p>​\t\t我们说一个事务在插入一条记录时需要判断一下插入位置是不是被别的事务加了所谓的gap锁（next-key锁也包含gap锁），如果有的话，插入操作需要等待，直到拥有gap锁的那个事务提交。InnoDB规定事务在等待的时候也需要生成一个锁，表明有事务想在某个间隙中插入新记录，但是现在在等待。这种类型的锁命名为Insert Intention Locks，官方的类型名称为：LOCK_INSERT_INTENTION，我们也可以称为插入意向锁</p>\n<hr>\n<h3 id=\"可重复读隔离级别下的加锁\"><a href=\"#可重复读隔离级别下的加锁\" class=\"headerlink\" title=\"可重复读隔离级别下的加锁\"></a>可重复读隔离级别下的加锁</h3><p>准备 表t </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> `t` (<br>  `id` <span class=\"hljs-type\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span>,<br>  `c` <span class=\"hljs-type\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span>,<br>  `d` <span class=\"hljs-type\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">NULL</span>,<br>  <span class=\"hljs-keyword\">PRIMARY</span> KEY (`id`),<br>  KEY `c` (`c`)<br>) ENGINE<span class=\"hljs-operator\">=</span>InnoDB <span class=\"hljs-keyword\">DEFAULT</span> CHARSET<span class=\"hljs-operator\">=</span>utf8;<br><br><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `t` (`id`, `c`, `d`)<br><span class=\"hljs-keyword\">VALUES</span><br>\t(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>),<br>\t(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>),<br>\t(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>),<br>\t(<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">15</span>),<br>\t(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">20</span>),<br>\t(<span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">25</span>);<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"3-1加锁的基本单位是-next-key\"><a href=\"#3-1加锁的基本单位是-next-key\" class=\"headerlink\" title=\"3.1加锁的基本单位是 next key\"></a><strong>3.1加锁的基本单位是 next key</strong></h5><table>\n<thead>\n<tr>\n<th></th>\n<th>session1</th>\n<th>session2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>t1</td>\n<td>begin;</td>\n<td></td>\n</tr>\n<tr>\n<td>t2</td>\n<td>select * from t where c &#x3D; 10 for update;</td>\n<td>begin;</td>\n</tr>\n<tr>\n<td>t3</td>\n<td></td>\n<td>INSERT INTO <code>t</code> (<code>id</code>, <code>c</code>, <code>d</code>) VALUES\t(8, 8, 8); <font color=#ff000>blocked</font></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> information_schema.INNODB_TRX;\t <br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1h1ajbo3xwuj20ty02nt92.jpg\" alt=\"image-20220415172906715\"></p>\n<p>​\t</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> information_schema.INNODB_LOCK_WAITS;<br></code></pre></td></tr></table></figure>\n\n<p>​\t<img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1h1ajc85fluj20bn02zgll.jpg\" alt=\"image-20220415172942467\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> information_schema.INNODB_LOCKS;<br></code></pre></td></tr></table></figure>\n\n<p>​\t<img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1h1ajcxxlyvj20k20353yp.jpg\" alt=\"image-20220415173023393\"></p>\n<h5 id=\"3-2访问到的数据会加锁\"><a href=\"#3-2访问到的数据会加锁\" class=\"headerlink\" title=\"3.2访问到的数据会加锁\"></a><strong>3.2访问到的数据会加锁</strong></h5><p>​\t  如下表中这个例子，会话一 给c&#x3D;5加了共享锁，但是只给二级索引加了锁，主键索引并没有加锁因为只查询了字段c不需要查主键索引，走了索引覆盖 。</p>\n<p>​\t\t会话二可以修改成功是因为只更新了主键索引没有更新 索引c。</p>\n<p>​\t\t会话三写入失败是因为会话一c&#x3D;5 这一行在索引c上 有Next key Lock。锁住了 （0,5）的区间，导致写入失败。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>session1</th>\n<th>session2</th>\n<th>session3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>t1</td>\n<td>begin;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>t2</td>\n<td>select c from t where c&#x3D;5 lock in share mode; #这里如果换成for update 也会对主键索引加锁，相应的会话二也会阻塞</td>\n<td>begin;</td>\n<td>begin;</td>\n</tr>\n<tr>\n<td>t3</td>\n<td></td>\n<td>update t set d &#x3D; 6 where id&#x3D;5; ✅</td>\n<td>INSERT INTO <code>t</code> (<code>id</code>, <code>c</code>, <code>d</code>) VALUES (3, 3, 3); <font color=#ff000>blocked</font></td>\n</tr>\n</tbody></table>\n<h5 id=\"3-3唯一索引加锁\"><a href=\"#3-3唯一索引加锁\" class=\"headerlink\" title=\"3.3唯一索引加锁\"></a><strong>3.3唯一索引加锁</strong></h5><ul>\n<li>等值查询 ：next key 退化为 记录锁</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>session1</th>\n<th>session2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>t1</td>\n<td>begin;</td>\n<td></td>\n</tr>\n<tr>\n<td>t2</td>\n<td>select * from t where id&#x3D;5 lock in share mode;</td>\n<td>begin;</td>\n</tr>\n<tr>\n<td>t3</td>\n<td></td>\n<td>select * from t where id&#x3D;10 for update;✅<br/>INSERT INTO <code>t</code> (<code>id</code>, <code>c</code>, <code>d</code>) VALUES (7, 7, 7);✅</td>\n</tr>\n</tbody></table>\n<ul>\n<li>范围查询：满足条件的记录都会加next key  会访问到第一个不满足条件的数据位置</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>session1</th>\n<th>session2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>t1</td>\n<td>begin;</td>\n<td></td>\n</tr>\n<tr>\n<td>t2</td>\n<td>select * from t where id &gt;&#x3D; 5 lock in share mode;</td>\n<td>begin;</td>\n</tr>\n<tr>\n<td>t3</td>\n<td></td>\n<td>select * from t where id &#x3D; 10 for update;<br/><font color=#ff000>blocked</font></td>\n</tr>\n</tbody></table>\n<ul>\n<li>唯一二级索引列无记录查询：会对 大于查询条件的第一个值 加 next key，比如 查出c&#x3D;3 记录不存在 会对 id&#x3D;5 这一行加上next key</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sq\">ALTER TABLE t DROP INDEX c, ADD UNIQUE KEY uniq_c (c);<br></code></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th></th>\n<th>session3</th>\n<th>session2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>t1</td>\n<td>begin;</td>\n<td></td>\n</tr>\n<tr>\n<td>t2</td>\n<td>select * from t where c &lt;&#x3D; 3 lock in share mode;</td>\n<td>begin;</td>\n</tr>\n<tr>\n<td>t3</td>\n<td></td>\n<td>select * from t where c &#x3D; 5 for update;<br/><font color=#ff000>blocked</font></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> t <span class=\"hljs-keyword\">DROP</span> INDEX uniq_c, <span class=\"hljs-keyword\">ADD</span> KEY c (c);<br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"3-4普通索引加锁\"><a href=\"#3-4普通索引加锁\" class=\"headerlink\" title=\"3.4普通索引加锁\"></a><strong>3.4普通索引加锁</strong></h5><ul>\n<li>等值查询：向右遍历到第一个不满足条件的值 next key 退化成 gap</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>session1</th>\n<th>session2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>t1</td>\n<td>begin;</td>\n<td></td>\n</tr>\n<tr>\n<td>t2</td>\n<td>select * from t where c&#x3D;5 lock in share mode;</td>\n<td>begin;</td>\n</tr>\n<tr>\n<td>t3</td>\n<td></td>\n<td>select * from t where c&#x3D;10 for update;    ✅<br/>INSERT INTO <code>t</code> (<code>id</code>, <code>c</code>, <code>d</code>) VALUES (7, 7, 7);    <font color=#ff000>blocked</font></td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>范围查询：唯一索引一样</p>\n</li>\n<li><p>无记录时： 唯一索引一样</p>\n</li>\n</ul>\n<h5 id=\"3-5-加锁时使用limit\"><a href=\"#3-5-加锁时使用limit\" class=\"headerlink\" title=\"3.5 加锁时使用limit\"></a><strong>3.5 加锁时使用limit</strong></h5><p>​\t\t还是针对于表t，再写入一条记录 </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `t` (`id`, `c`, `d`) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>);<br></code></pre></td></tr></table></figure>\n\n<p>​\t\t此时索引c 的数据是</p>\n<table>\n<thead>\n<tr>\n<th>c</th>\n<th>0</th>\n<th>5</th>\n<th>10</th>\n<th>10</th>\n<th>15</th>\n<th>20</th>\n<th>25</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>0</td>\n<td>5</td>\n<td>10</td>\n<td>30</td>\n<td>15</td>\n<td>20</td>\n<td>25</td>\n</tr>\n</tbody></table>\n<p>​\t\t会话二不会阻塞的原因是会话一 在语句中明确的使用limit 2，索引只对c&#x3D;10 两行加了锁。同时已印证了只对访问到的记录加锁</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>session1</th>\n<th>session2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>t1</td>\n<td>begin;</td>\n<td></td>\n</tr>\n<tr>\n<td>t2</td>\n<td>select * from t where c&#x3D;10 for update  limit 2;</td>\n<td>begin;</td>\n</tr>\n<tr>\n<td>t3</td>\n<td></td>\n<td>INSERT INTO <code>t</code> (<code>id</code>, <code>c</code>, <code>d</code>) VALUES (13, 13, 13);  ✅</td>\n</tr>\n</tbody></table>\n<h5 id=\"3-6加锁规则总结\"><a href=\"#3-6加锁规则总结\" class=\"headerlink\" title=\"3.6加锁规则总结\"></a>3.6加锁规则总结</h5><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 加锁的基本单位是 next key</li>\n<li><input disabled=\"\" type=\"checkbox\"> 访问到的数据会加锁</li>\n<li><input disabled=\"\" type=\"checkbox\"> 唯一索引等值查询 next key 退化为 记录锁</li>\n<li><input disabled=\"\" type=\"checkbox\"> 普通索引等值查询 向右遍历到第一个不满足条件的值 next key 退化成 gap </li>\n<li><input disabled=\"\" type=\"checkbox\"> 范围查询时满足条件的记录都会加next key  会访问到第一个不满足条件的数据位置</li>\n<li><input disabled=\"\" type=\"checkbox\"> 无记录的范围查询 会对 大于查询条件的第一个值 加 next key</li>\n</ul>\n"},{"title":"记录一次WhereIn没有使用到索引的排查过程","date":"2022-02-13T14:11:41.000Z","banner_img":"https://cdn.wallpaperhub.app/cloudcache/1/7/1/6/5/0/1716501b654d98eb1a8b54faa5f08b56bb22416f.jpg","index_img":"https://cdn.wallpaperhub.app/cloudcache/e/c/b/b/b/2/ecbbb2b4786d5a8e3fa86c276eb2dffa6a47fdea.jpg","_content":"\n### 背景\n\n- 字段summary_id是表已经有一千多万数据之后新增的，历史数据默认值为0 ，加好summary_id字段后新增了索引：idx_summary_id\n\n- sql查询没有用索引，猜测是和索引的基数有关，MySQL in查询能不能用到索引主要是看使用索引的成本和全表扫描的成本那个更低。下面是证实排查过程\n\n- 没有用到索引的sql语句为 \n\n```sql\nselect * from `btb_bid_user_apply` where summary_id in (108,156,166,167,168,170,172,174,176,178,179,193,196);\n```\n\n- 表结构，省略了无关字段\n\n```sql\nCREATE TABLE `btb_bid_user_apply` (\n  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n  `summary_id` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '出价汇总表id'\n  KEY `idx_summary_id` (`summary_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=15526682 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=8;\n```\n\n\n### 排查过程\n\n- 第一步 查询 eq_range_index_dive_limit（SHOW VARIABLES LIKE '%dive%';）线上结果为10，\n    - 这个系统变量的意思是，当in语句中的参数个数大于或等于系统变量eq_range_index_dive_limit 时 不会使用index dive 计算单个区间节点对应的索引记录条数，而是使用索引统计数据\n   \n    - 查出 idx_summary_id的Cardinality=1，Rows= 13945557，这里计算单个区间节点对应的索引记录数 = 13945557 / 1, 总索引记录数为 13945557 * 13 = 181292241\n\n​\t\t\t\t \t\t\t\t\t\n\n- 第二步 使用optimizer_trace 分析查询成本\n\n  ```sql\n  #开启查询分析\n  SET optimizer_trace=\"enabled=on\";\n  \n  select * from `btb_bid_user_apply` where summary_id in (108,156,166,167,168,170,172,174,176,178,179,193,196);\n  \n  #查询刚执行的语句的优化过程\n  SELECT * FROM information_schema.OPTIMIZER_TRACE; \n  ```\n\n  - 查询优化过程主要信息\n\n    ```json\n    # 预估不同单表访问方法的访问成本\n    {\n        \"rows_estimation\": [{\n            \"table\": \"`btb_bid_user_apply`\", # 全表扫描的行数以及成本\n            \"range_analysis\": {\n                \"table_scan\": {\n                    \"rows\": 13945557,\n                    \"cost\": 2870000\n                },\n                # 分析可能使用的索引\n                \"potential_range_indexes\": [{\n                    \"index\": \"PRIMARY\",\n                    \"usable\": false,\n                    \"cause\": \"not_applicable\"\n                },{\n                    \"index\": \"idx_summary_id\",\n                    \"usable\": true,#可能被使用\n                    \"key_parts\": [\"summary_id\", \"id\"]\n                }],\n                \"setup_range_conditions\": [],\n                \"group_index_range\": {\n                    \"chosen\": false,\n                    \"cause\": \"not_group_by_or_distinct\"\n                },\n    \t\t\t\t\t\t# 分析各种可能使用的索引的成本\n                \"analyzing_range_alternatives\": {\n                    \"range_scan_alternatives\": [{\n                        \"index\": \"idx_summary_id\",\n                        \"ranges\": [\"108 <= summary_id <= 108\", \"156 <= summary_id <= 156\", \"166 <= summary_id <= 166\", \"167 <= summary_id <= 167\", \"168 <= summary_id <= 168\", \"170 <= summary_id <= 170\", \"172 <= summary_id <= 172\", \"174 <= summary_id <= 174\", \"176 <= summary_id <= 176\", \"178 <= summary_id <= 178\", \"179 <= summary_id <= 179\", \"193 <= summary_id <= 193\", \"196 <= summary_id <= 196\"],\n                        \"index_dives_for_eq_ranges\": false,   # 是否使用index dive\n                        \"rowid_ordered\": false,  # 使用该索引获取的记录是否按照主键排序\n                        \"using_mrr\": true,# 是否使用mrr\n                        \"index_only\": false, #是否是索引覆盖访问\n                        \"rows\": 181292241,  #使用该索引获取的记录条数和第一步计算的扫描行数一样\n                        \"cost\": 199000000, # 使用该索引的成本\n                        \"chosen\": false, # 是否选择该索引\n                        \"cause\": \"cost\"\n                    }],\n                    \"analyzing_roworder_intersect\": {\n                        \"usable\": false,\n                        \"cause\": \"too_few_roworder_scans\"\n                    }\n                }\n            }\n        }]\n    }\n    \n    #最终使用的查询计划，可以看到使用全表扫描\n    {\n        \"considered_execution_plans\": [{\n            \"plan_prefix\": [],\n            \"table\": \"`btb_bid_user_apply`\",\n            \"best_access_path\": {\n                \"considered_access_paths\": [{\n                    \"rows_to_scan\": 13945557,\n                    \"access_type\": \"scan\",\n                    \"resulting_rows\": 13900000,\n                    \"cost\": 2870000, \n                    \"chosen\": true\n                }]\n            },\n            \"condition_filtering_pct\": 100,\n            \"rows_for_plan\": 13900000,\n            \"cost_for_plan\": 2870000,\n            \"chosen\": true\n        }]\n    }\n    ```\n\n   -\t第三步 解释和验证查询成本\n     -\tMySQL 将 IO 成本设为1，cpu 判断成本设为0.2。IO成本是扫描一页的成本，对于回表操作的IO成本是每回表一次相当于一次磁盘IO\n     -\t扫描全表的计算方式 （ 聚簇索引叶子节点数 * 1  + 1） + （记录数*0.2+1）, 聚簇索引叶子节点数  通过show table status like \"%btb_bid_user_apply%\"  中的 Data_length / 16/1024 计算得出，本次查询的  聚簇索引叶子节点数大概为 646971392/16/1024=39488，成本为：39488 + 13945557*0.2 =2828599，接近于查询成本分析的 2870000\n     -\t通过查询索引 idx_summary_id 成本： 181292241*1 + ( 181292241*0.2 ) =217550689，与查询成本分析 199000000 多了一千七百多万，暂时还不清楚具体原因\n       -\t181292241*1 表示 回表的IO成本\n       -\t ( 181292241*0.2 ) 表示回表之后 cpu 计算的成本\n       \n       \n### 结论\n- 关于in 能不能用到索引 主要还是看 使用索引的成本的全表扫描成本那个小\n    - 全表扫描成本：（ 聚簇索引叶子节点数 * 1 + 1） + （记录数*0.2+1） \n        - 聚簇索引叶子节点数：通过show table status like \"%btb_bid_user_apply%\"  中的 Data_length / 16/1024 计算得出\n    \n    - 查询索引的成本：当in语句中的参数个数小于系统变量eq_range_index_dive_limit 使用index dive 否则使用索引统计数据\n       - index dive：是计算单个区间节点的对应索引记录数的一种方式，其主要原理是先获取索引对应的`B+`树的`区间最左记录`和`区间最右记录`，然后再计算这两条记录之间有多少记录（记录条数少的时候可以做到精确计算，多的时候只能估算）。这种通过直接访问索引对应的`B+`树来计算某个范围区间对应的索引记录条数的方式称之为`index dive`\n        - 单个区间节点是 in查询会转换的范围查\n                \n       - 索引统计数据 是 用估算的方式来计算出单个区间节点对应的索引记录数量，涉及到两个值，Cardinality（索引基数，通过show index from table_name） 和 Rows（总记录数 通过 show table status like \"%table_name%\";） 总记录数/索引基数*in语句中的参数个数=估算的扫描条数；\n       - 查询成本 = 估算的扫描条数*1 + （估算的扫描条数 *0.2）","source":"_posts/mysql-wherein.md","raw":"---\ntitle: 记录一次WhereIn没有使用到索引的排查过程\ndate: 2022-02-13 22:11:41\ntags: MySQL,索引\ncategories: \n  - 技术笔记\n  - MySQL\nbanner_img: https://cdn.wallpaperhub.app/cloudcache/1/7/1/6/5/0/1716501b654d98eb1a8b54faa5f08b56bb22416f.jpg\nindex_img: https://cdn.wallpaperhub.app/cloudcache/e/c/b/b/b/2/ecbbb2b4786d5a8e3fa86c276eb2dffa6a47fdea.jpg\n---\n\n### 背景\n\n- 字段summary_id是表已经有一千多万数据之后新增的，历史数据默认值为0 ，加好summary_id字段后新增了索引：idx_summary_id\n\n- sql查询没有用索引，猜测是和索引的基数有关，MySQL in查询能不能用到索引主要是看使用索引的成本和全表扫描的成本那个更低。下面是证实排查过程\n\n- 没有用到索引的sql语句为 \n\n```sql\nselect * from `btb_bid_user_apply` where summary_id in (108,156,166,167,168,170,172,174,176,178,179,193,196);\n```\n\n- 表结构，省略了无关字段\n\n```sql\nCREATE TABLE `btb_bid_user_apply` (\n  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n  `summary_id` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '出价汇总表id'\n  KEY `idx_summary_id` (`summary_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=15526682 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=8;\n```\n\n\n### 排查过程\n\n- 第一步 查询 eq_range_index_dive_limit（SHOW VARIABLES LIKE '%dive%';）线上结果为10，\n    - 这个系统变量的意思是，当in语句中的参数个数大于或等于系统变量eq_range_index_dive_limit 时 不会使用index dive 计算单个区间节点对应的索引记录条数，而是使用索引统计数据\n   \n    - 查出 idx_summary_id的Cardinality=1，Rows= 13945557，这里计算单个区间节点对应的索引记录数 = 13945557 / 1, 总索引记录数为 13945557 * 13 = 181292241\n\n​\t\t\t\t \t\t\t\t\t\n\n- 第二步 使用optimizer_trace 分析查询成本\n\n  ```sql\n  #开启查询分析\n  SET optimizer_trace=\"enabled=on\";\n  \n  select * from `btb_bid_user_apply` where summary_id in (108,156,166,167,168,170,172,174,176,178,179,193,196);\n  \n  #查询刚执行的语句的优化过程\n  SELECT * FROM information_schema.OPTIMIZER_TRACE; \n  ```\n\n  - 查询优化过程主要信息\n\n    ```json\n    # 预估不同单表访问方法的访问成本\n    {\n        \"rows_estimation\": [{\n            \"table\": \"`btb_bid_user_apply`\", # 全表扫描的行数以及成本\n            \"range_analysis\": {\n                \"table_scan\": {\n                    \"rows\": 13945557,\n                    \"cost\": 2870000\n                },\n                # 分析可能使用的索引\n                \"potential_range_indexes\": [{\n                    \"index\": \"PRIMARY\",\n                    \"usable\": false,\n                    \"cause\": \"not_applicable\"\n                },{\n                    \"index\": \"idx_summary_id\",\n                    \"usable\": true,#可能被使用\n                    \"key_parts\": [\"summary_id\", \"id\"]\n                }],\n                \"setup_range_conditions\": [],\n                \"group_index_range\": {\n                    \"chosen\": false,\n                    \"cause\": \"not_group_by_or_distinct\"\n                },\n    \t\t\t\t\t\t# 分析各种可能使用的索引的成本\n                \"analyzing_range_alternatives\": {\n                    \"range_scan_alternatives\": [{\n                        \"index\": \"idx_summary_id\",\n                        \"ranges\": [\"108 <= summary_id <= 108\", \"156 <= summary_id <= 156\", \"166 <= summary_id <= 166\", \"167 <= summary_id <= 167\", \"168 <= summary_id <= 168\", \"170 <= summary_id <= 170\", \"172 <= summary_id <= 172\", \"174 <= summary_id <= 174\", \"176 <= summary_id <= 176\", \"178 <= summary_id <= 178\", \"179 <= summary_id <= 179\", \"193 <= summary_id <= 193\", \"196 <= summary_id <= 196\"],\n                        \"index_dives_for_eq_ranges\": false,   # 是否使用index dive\n                        \"rowid_ordered\": false,  # 使用该索引获取的记录是否按照主键排序\n                        \"using_mrr\": true,# 是否使用mrr\n                        \"index_only\": false, #是否是索引覆盖访问\n                        \"rows\": 181292241,  #使用该索引获取的记录条数和第一步计算的扫描行数一样\n                        \"cost\": 199000000, # 使用该索引的成本\n                        \"chosen\": false, # 是否选择该索引\n                        \"cause\": \"cost\"\n                    }],\n                    \"analyzing_roworder_intersect\": {\n                        \"usable\": false,\n                        \"cause\": \"too_few_roworder_scans\"\n                    }\n                }\n            }\n        }]\n    }\n    \n    #最终使用的查询计划，可以看到使用全表扫描\n    {\n        \"considered_execution_plans\": [{\n            \"plan_prefix\": [],\n            \"table\": \"`btb_bid_user_apply`\",\n            \"best_access_path\": {\n                \"considered_access_paths\": [{\n                    \"rows_to_scan\": 13945557,\n                    \"access_type\": \"scan\",\n                    \"resulting_rows\": 13900000,\n                    \"cost\": 2870000, \n                    \"chosen\": true\n                }]\n            },\n            \"condition_filtering_pct\": 100,\n            \"rows_for_plan\": 13900000,\n            \"cost_for_plan\": 2870000,\n            \"chosen\": true\n        }]\n    }\n    ```\n\n   -\t第三步 解释和验证查询成本\n     -\tMySQL 将 IO 成本设为1，cpu 判断成本设为0.2。IO成本是扫描一页的成本，对于回表操作的IO成本是每回表一次相当于一次磁盘IO\n     -\t扫描全表的计算方式 （ 聚簇索引叶子节点数 * 1  + 1） + （记录数*0.2+1）, 聚簇索引叶子节点数  通过show table status like \"%btb_bid_user_apply%\"  中的 Data_length / 16/1024 计算得出，本次查询的  聚簇索引叶子节点数大概为 646971392/16/1024=39488，成本为：39488 + 13945557*0.2 =2828599，接近于查询成本分析的 2870000\n     -\t通过查询索引 idx_summary_id 成本： 181292241*1 + ( 181292241*0.2 ) =217550689，与查询成本分析 199000000 多了一千七百多万，暂时还不清楚具体原因\n       -\t181292241*1 表示 回表的IO成本\n       -\t ( 181292241*0.2 ) 表示回表之后 cpu 计算的成本\n       \n       \n### 结论\n- 关于in 能不能用到索引 主要还是看 使用索引的成本的全表扫描成本那个小\n    - 全表扫描成本：（ 聚簇索引叶子节点数 * 1 + 1） + （记录数*0.2+1） \n        - 聚簇索引叶子节点数：通过show table status like \"%btb_bid_user_apply%\"  中的 Data_length / 16/1024 计算得出\n    \n    - 查询索引的成本：当in语句中的参数个数小于系统变量eq_range_index_dive_limit 使用index dive 否则使用索引统计数据\n       - index dive：是计算单个区间节点的对应索引记录数的一种方式，其主要原理是先获取索引对应的`B+`树的`区间最左记录`和`区间最右记录`，然后再计算这两条记录之间有多少记录（记录条数少的时候可以做到精确计算，多的时候只能估算）。这种通过直接访问索引对应的`B+`树来计算某个范围区间对应的索引记录条数的方式称之为`index dive`\n        - 单个区间节点是 in查询会转换的范围查\n                \n       - 索引统计数据 是 用估算的方式来计算出单个区间节点对应的索引记录数量，涉及到两个值，Cardinality（索引基数，通过show index from table_name） 和 Rows（总记录数 通过 show table status like \"%table_name%\";） 总记录数/索引基数*in语句中的参数个数=估算的扫描条数；\n       - 查询成本 = 估算的扫描条数*1 + （估算的扫描条数 *0.2）","slug":"mysql-wherein","published":1,"updated":"2023-03-15T08:44:27.958Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf9h81dp0005qmfyfh1g2oaz","content":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><ul>\n<li><p>字段summary_id是表已经有一千多万数据之后新增的，历史数据默认值为0 ，加好summary_id字段后新增了索引：idx_summary_id</p>\n</li>\n<li><p>sql查询没有用索引，猜测是和索引的基数有关，MySQL in查询能不能用到索引主要是看使用索引的成本和全表扫描的成本那个更低。下面是证实排查过程</p>\n</li>\n<li><p>没有用到索引的sql语句为</p>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><div class=\"code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> `btb_bid_user_apply` <span class=\"hljs-keyword\">where</span> summary_id <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">108</span>,<span class=\"hljs-number\">156</span>,<span class=\"hljs-number\">166</span>,<span class=\"hljs-number\">167</span>,<span class=\"hljs-number\">168</span>,<span class=\"hljs-number\">170</span>,<span class=\"hljs-number\">172</span>,<span class=\"hljs-number\">174</span>,<span class=\"hljs-number\">176</span>,<span class=\"hljs-number\">178</span>,<span class=\"hljs-number\">179</span>,<span class=\"hljs-number\">193</span>,<span class=\"hljs-number\">196</span>);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>表结构，省略了无关字段</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> `btb_bid_user_apply` (<br>  `id` <span class=\"hljs-type\">int</span>(<span class=\"hljs-number\">11</span>) unsigned <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> AUTO_INCREMENT,<br>  `summary_id` <span class=\"hljs-type\">int</span>(<span class=\"hljs-number\">11</span>) unsigned <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-string\">&#x27;0&#x27;</span> COMMENT <span class=\"hljs-string\">&#x27;出价汇总表id&#x27;</span><br>  KEY `idx_summary_id` (`summary_id`)<br>) ENGINE<span class=\"hljs-operator\">=</span>InnoDB AUTO_INCREMENT<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">15526682</span> <span class=\"hljs-keyword\">DEFAULT</span> CHARSET<span class=\"hljs-operator\">=</span>utf8 ROW_FORMAT<span class=\"hljs-operator\">=</span>COMPRESSED KEY_BLOCK_SIZE<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">8</span>;<br></code></pre></td></tr></table></figure>\n\n\n<h3 id=\"排查过程\"><a href=\"#排查过程\" class=\"headerlink\" title=\"排查过程\"></a>排查过程</h3><ul>\n<li>第一步 查询 eq_range_index_dive_limit（SHOW VARIABLES LIKE ‘%dive%’;）线上结果为10，<ul>\n<li><p>这个系统变量的意思是，当in语句中的参数个数大于或等于系统变量eq_range_index_dive_limit 时 不会使用index dive 计算单个区间节点对应的索引记录条数，而是使用索引统计数据</p>\n</li>\n<li><p>查出 idx_summary_id的Cardinality&#x3D;1，Rows&#x3D; 13945557，这里计算单个区间节点对应的索引记录数 &#x3D; 13945557 &#x2F; 1, 总索引记录数为 13945557 * 13 &#x3D; 181292241</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>​\t\t\t\t \t\t\t\t\t</p>\n<ul>\n<li><p>第二步 使用optimizer_trace 分析查询成本</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">#开启查询分析<br><span class=\"hljs-keyword\">SET</span> optimizer_trace<span class=\"hljs-operator\">=</span>&quot;enabled=on&quot;;<br><br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> `btb_bid_user_apply` <span class=\"hljs-keyword\">where</span> summary_id <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">108</span>,<span class=\"hljs-number\">156</span>,<span class=\"hljs-number\">166</span>,<span class=\"hljs-number\">167</span>,<span class=\"hljs-number\">168</span>,<span class=\"hljs-number\">170</span>,<span class=\"hljs-number\">172</span>,<span class=\"hljs-number\">174</span>,<span class=\"hljs-number\">176</span>,<span class=\"hljs-number\">178</span>,<span class=\"hljs-number\">179</span>,<span class=\"hljs-number\">193</span>,<span class=\"hljs-number\">196</span>);<br><br>#查询刚执行的语句的优化过程<br><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> information_schema.OPTIMIZER_TRACE; <br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>查询优化过程主要信息</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"># 预估不同单表访问方法的访问成本<br><span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-attr\">&quot;rows_estimation&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">&#123;</span><br>        <span class=\"hljs-attr\">&quot;table&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;`btb_bid_user_apply`&quot;</span><span class=\"hljs-punctuation\">,</span> # 全表扫描的行数以及成本<br>        <span class=\"hljs-attr\">&quot;range_analysis&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>            <span class=\"hljs-attr\">&quot;table_scan&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>                <span class=\"hljs-attr\">&quot;rows&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">13945557</span><span class=\"hljs-punctuation\">,</span><br>                <span class=\"hljs-attr\">&quot;cost&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">2870000</span><br>            <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br>            # 分析可能使用的索引<br>            <span class=\"hljs-attr\">&quot;potential_range_indexes&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">&#123;</span><br>                <span class=\"hljs-attr\">&quot;index&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;PRIMARY&quot;</span><span class=\"hljs-punctuation\">,</span><br>                <span class=\"hljs-attr\">&quot;usable&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">false</span><span class=\"hljs-punctuation\">,</span><br>                <span class=\"hljs-attr\">&quot;cause&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;not_applicable&quot;</span><br>            <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-punctuation\">&#123;</span><br>                <span class=\"hljs-attr\">&quot;index&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;idx_summary_id&quot;</span><span class=\"hljs-punctuation\">,</span><br>                <span class=\"hljs-attr\">&quot;usable&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span><span class=\"hljs-punctuation\">,</span>#可能被使用<br>                <span class=\"hljs-attr\">&quot;key_parts&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">&quot;summary_id&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;id&quot;</span><span class=\"hljs-punctuation\">]</span><br>            <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span><br>            <span class=\"hljs-attr\">&quot;setup_range_conditions&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span><br>            <span class=\"hljs-attr\">&quot;group_index_range&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>                <span class=\"hljs-attr\">&quot;chosen&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">false</span><span class=\"hljs-punctuation\">,</span><br>                <span class=\"hljs-attr\">&quot;cause&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;not_group_by_or_distinct&quot;</span><br>            <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br>\t\t\t\t\t\t# 分析各种可能使用的索引的成本<br>            <span class=\"hljs-attr\">&quot;analyzing_range_alternatives&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>                <span class=\"hljs-attr\">&quot;range_scan_alternatives&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">&#123;</span><br>                    <span class=\"hljs-attr\">&quot;index&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;idx_summary_id&quot;</span><span class=\"hljs-punctuation\">,</span><br>                    <span class=\"hljs-attr\">&quot;ranges&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">&quot;108 &lt;= summary_id &lt;= 108&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;156 &lt;= summary_id &lt;= 156&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;166 &lt;= summary_id &lt;= 166&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;167 &lt;= summary_id &lt;= 167&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;168 &lt;= summary_id &lt;= 168&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;170 &lt;= summary_id &lt;= 170&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;172 &lt;= summary_id &lt;= 172&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;174 &lt;= summary_id &lt;= 174&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;176 &lt;= summary_id &lt;= 176&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;178 &lt;= summary_id &lt;= 178&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;179 &lt;= summary_id &lt;= 179&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;193 &lt;= summary_id &lt;= 193&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;196 &lt;= summary_id &lt;= 196&quot;</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span><br>                    <span class=\"hljs-attr\">&quot;index_dives_for_eq_ranges&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">false</span><span class=\"hljs-punctuation\">,</span>   # 是否使用index dive<br>                    <span class=\"hljs-attr\">&quot;rowid_ordered&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">false</span><span class=\"hljs-punctuation\">,</span>  # 使用该索引获取的记录是否按照主键排序<br>                    <span class=\"hljs-attr\">&quot;using_mrr&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span><span class=\"hljs-punctuation\">,</span># 是否使用mrr<br>                    <span class=\"hljs-attr\">&quot;index_only&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">false</span><span class=\"hljs-punctuation\">,</span> #是否是索引覆盖访问<br>                    <span class=\"hljs-attr\">&quot;rows&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">181292241</span><span class=\"hljs-punctuation\">,</span>  #使用该索引获取的记录条数和第一步计算的扫描行数一样<br>                    <span class=\"hljs-attr\">&quot;cost&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">199000000</span><span class=\"hljs-punctuation\">,</span> # 使用该索引的成本<br>                    <span class=\"hljs-attr\">&quot;chosen&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">false</span><span class=\"hljs-punctuation\">,</span> # 是否选择该索引<br>                    <span class=\"hljs-attr\">&quot;cause&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;cost&quot;</span><br>                <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span><br>                <span class=\"hljs-attr\">&quot;analyzing_roworder_intersect&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>                    <span class=\"hljs-attr\">&quot;usable&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">false</span><span class=\"hljs-punctuation\">,</span><br>                    <span class=\"hljs-attr\">&quot;cause&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;too_few_roworder_scans&quot;</span><br>                <span class=\"hljs-punctuation\">&#125;</span><br>            <span class=\"hljs-punctuation\">&#125;</span><br>        <span class=\"hljs-punctuation\">&#125;</span><br>    <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">]</span><br><span class=\"hljs-punctuation\">&#125;</span><br><br>#最终使用的查询计划，可以看到使用全表扫描<br><span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-attr\">&quot;considered_execution_plans&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">&#123;</span><br>        <span class=\"hljs-attr\">&quot;plan_prefix&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;table&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;`btb_bid_user_apply`&quot;</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;best_access_path&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>            <span class=\"hljs-attr\">&quot;considered_access_paths&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">&#123;</span><br>                <span class=\"hljs-attr\">&quot;rows_to_scan&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">13945557</span><span class=\"hljs-punctuation\">,</span><br>                <span class=\"hljs-attr\">&quot;access_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;scan&quot;</span><span class=\"hljs-punctuation\">,</span><br>                <span class=\"hljs-attr\">&quot;resulting_rows&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">13900000</span><span class=\"hljs-punctuation\">,</span><br>                <span class=\"hljs-attr\">&quot;cost&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">2870000</span><span class=\"hljs-punctuation\">,</span> <br>                <span class=\"hljs-attr\">&quot;chosen&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span><br>            <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">]</span><br>        <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;condition_filtering_pct&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">100</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;rows_for_plan&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">13900000</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;cost_for_plan&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">2870000</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;chosen&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span><br>    <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">]</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><div class=\"code-wrapper\"><pre><code class=\"hljs\">第三步 解释和验证查询成本\n</code></pre></div>\n<ul>\n<li><div class=\"code-wrapper\"><pre><code class=\"hljs\">MySQL 将 IO 成本设为1，cpu 判断成本设为0.2。IO成本是扫描一页的成本，对于回表操作的IO成本是每回表一次相当于一次磁盘IO\n</code></pre></div>\n</li>\n<li><div class=\"code-wrapper\"><pre><code class=\"hljs\">扫描全表的计算方式 （ 聚簇索引叶子节点数 * 1  + 1） + （记录数*0.2+1）, 聚簇索引叶子节点数  通过show table status like &quot;%btb_bid_user_apply%&quot;  中的 Data_length / 16/1024 计算得出，本次查询的  聚簇索引叶子节点数大概为 646971392/16/1024=39488，成本为：39488 + 13945557*0.2 =2828599，接近于查询成本分析的 2870000\n</code></pre></div>\n</li>\n<li><div class=\"code-wrapper\"><pre><code class=\"hljs\">通过查询索引 idx_summary_id 成本： 181292241*1 + ( 181292241*0.2 ) =217550689，与查询成本分析 199000000 多了一千七百多万，暂时还不清楚具体原因\n</code></pre></div>\n<ul>\n<li><div class=\"code-wrapper\"><pre><code class=\"hljs\">181292241*1 表示 回表的IO成本\n</code></pre></div>\n</li>\n<li><div class=\"code-wrapper\"><pre><code class=\"hljs\"> ( 181292241*0.2 ) 表示回表之后 cpu 计算的成本\n</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><ul>\n<li>关于in 能不能用到索引 主要还是看 使用索引的成本的全表扫描成本那个小<ul>\n<li><p>全表扫描成本：（ 聚簇索引叶子节点数 * 1 + 1） + （记录数*0.2+1） </p>\n<ul>\n<li>聚簇索引叶子节点数：通过show table status like “%btb_bid_user_apply%”  中的 Data_length &#x2F; 16&#x2F;1024 计算得出</li>\n</ul>\n</li>\n<li><p>查询索引的成本：当in语句中的参数个数小于系统变量eq_range_index_dive_limit 使用index dive 否则使用索引统计数据</p>\n<ul>\n<li><p>index dive：是计算单个区间节点的对应索引记录数的一种方式，其主要原理是先获取索引对应的<code>B+</code>树的<code>区间最左记录</code>和<code>区间最右记录</code>，然后再计算这两条记录之间有多少记录（记录条数少的时候可以做到精确计算，多的时候只能估算）。这种通过直接访问索引对应的<code>B+</code>树来计算某个范围区间对应的索引记录条数的方式称之为<code>index dive</code></p>\n</li>\n<li><p>单个区间节点是 in查询会转换的范围查</p>\n</li>\n<li><p>索引统计数据 是 用估算的方式来计算出单个区间节点对应的索引记录数量，涉及到两个值，Cardinality（索引基数，通过show index from table_name） 和 Rows（总记录数 通过 show table status like “%table_name%”;） 总记录数&#x2F;索引基数*in语句中的参数个数&#x3D;估算的扫描条数；</p>\n</li>\n<li><p>查询成本 &#x3D; 估算的扫描条数*1 + （估算的扫描条数 *0.2）</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"wordcount":4723,"excerpt":"","more":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><ul>\n<li><p>字段summary_id是表已经有一千多万数据之后新增的，历史数据默认值为0 ，加好summary_id字段后新增了索引：idx_summary_id</p>\n</li>\n<li><p>sql查询没有用索引，猜测是和索引的基数有关，MySQL in查询能不能用到索引主要是看使用索引的成本和全表扫描的成本那个更低。下面是证实排查过程</p>\n</li>\n<li><p>没有用到索引的sql语句为</p>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> `btb_bid_user_apply` <span class=\"hljs-keyword\">where</span> summary_id <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">108</span>,<span class=\"hljs-number\">156</span>,<span class=\"hljs-number\">166</span>,<span class=\"hljs-number\">167</span>,<span class=\"hljs-number\">168</span>,<span class=\"hljs-number\">170</span>,<span class=\"hljs-number\">172</span>,<span class=\"hljs-number\">174</span>,<span class=\"hljs-number\">176</span>,<span class=\"hljs-number\">178</span>,<span class=\"hljs-number\">179</span>,<span class=\"hljs-number\">193</span>,<span class=\"hljs-number\">196</span>);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>表结构，省略了无关字段</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> `btb_bid_user_apply` (<br>  `id` <span class=\"hljs-type\">int</span>(<span class=\"hljs-number\">11</span>) unsigned <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> AUTO_INCREMENT,<br>  `summary_id` <span class=\"hljs-type\">int</span>(<span class=\"hljs-number\">11</span>) unsigned <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-string\">&#x27;0&#x27;</span> COMMENT <span class=\"hljs-string\">&#x27;出价汇总表id&#x27;</span><br>  KEY `idx_summary_id` (`summary_id`)<br>) ENGINE<span class=\"hljs-operator\">=</span>InnoDB AUTO_INCREMENT<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">15526682</span> <span class=\"hljs-keyword\">DEFAULT</span> CHARSET<span class=\"hljs-operator\">=</span>utf8 ROW_FORMAT<span class=\"hljs-operator\">=</span>COMPRESSED KEY_BLOCK_SIZE<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">8</span>;<br></code></pre></td></tr></table></figure>\n\n\n<h3 id=\"排查过程\"><a href=\"#排查过程\" class=\"headerlink\" title=\"排查过程\"></a>排查过程</h3><ul>\n<li>第一步 查询 eq_range_index_dive_limit（SHOW VARIABLES LIKE ‘%dive%’;）线上结果为10，<ul>\n<li><p>这个系统变量的意思是，当in语句中的参数个数大于或等于系统变量eq_range_index_dive_limit 时 不会使用index dive 计算单个区间节点对应的索引记录条数，而是使用索引统计数据</p>\n</li>\n<li><p>查出 idx_summary_id的Cardinality&#x3D;1，Rows&#x3D; 13945557，这里计算单个区间节点对应的索引记录数 &#x3D; 13945557 &#x2F; 1, 总索引记录数为 13945557 * 13 &#x3D; 181292241</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>​\t\t\t\t \t\t\t\t\t</p>\n<ul>\n<li><p>第二步 使用optimizer_trace 分析查询成本</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">#开启查询分析<br><span class=\"hljs-keyword\">SET</span> optimizer_trace<span class=\"hljs-operator\">=</span>&quot;enabled=on&quot;;<br><br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> `btb_bid_user_apply` <span class=\"hljs-keyword\">where</span> summary_id <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">108</span>,<span class=\"hljs-number\">156</span>,<span class=\"hljs-number\">166</span>,<span class=\"hljs-number\">167</span>,<span class=\"hljs-number\">168</span>,<span class=\"hljs-number\">170</span>,<span class=\"hljs-number\">172</span>,<span class=\"hljs-number\">174</span>,<span class=\"hljs-number\">176</span>,<span class=\"hljs-number\">178</span>,<span class=\"hljs-number\">179</span>,<span class=\"hljs-number\">193</span>,<span class=\"hljs-number\">196</span>);<br><br>#查询刚执行的语句的优化过程<br><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> information_schema.OPTIMIZER_TRACE; <br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>查询优化过程主要信息</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"># 预估不同单表访问方法的访问成本<br><span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-attr\">&quot;rows_estimation&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">&#123;</span><br>        <span class=\"hljs-attr\">&quot;table&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;`btb_bid_user_apply`&quot;</span><span class=\"hljs-punctuation\">,</span> # 全表扫描的行数以及成本<br>        <span class=\"hljs-attr\">&quot;range_analysis&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>            <span class=\"hljs-attr\">&quot;table_scan&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>                <span class=\"hljs-attr\">&quot;rows&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">13945557</span><span class=\"hljs-punctuation\">,</span><br>                <span class=\"hljs-attr\">&quot;cost&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">2870000</span><br>            <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br>            # 分析可能使用的索引<br>            <span class=\"hljs-attr\">&quot;potential_range_indexes&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">&#123;</span><br>                <span class=\"hljs-attr\">&quot;index&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;PRIMARY&quot;</span><span class=\"hljs-punctuation\">,</span><br>                <span class=\"hljs-attr\">&quot;usable&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">false</span><span class=\"hljs-punctuation\">,</span><br>                <span class=\"hljs-attr\">&quot;cause&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;not_applicable&quot;</span><br>            <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-punctuation\">&#123;</span><br>                <span class=\"hljs-attr\">&quot;index&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;idx_summary_id&quot;</span><span class=\"hljs-punctuation\">,</span><br>                <span class=\"hljs-attr\">&quot;usable&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span><span class=\"hljs-punctuation\">,</span>#可能被使用<br>                <span class=\"hljs-attr\">&quot;key_parts&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">&quot;summary_id&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;id&quot;</span><span class=\"hljs-punctuation\">]</span><br>            <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span><br>            <span class=\"hljs-attr\">&quot;setup_range_conditions&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span><br>            <span class=\"hljs-attr\">&quot;group_index_range&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>                <span class=\"hljs-attr\">&quot;chosen&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">false</span><span class=\"hljs-punctuation\">,</span><br>                <span class=\"hljs-attr\">&quot;cause&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;not_group_by_or_distinct&quot;</span><br>            <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br>\t\t\t\t\t\t# 分析各种可能使用的索引的成本<br>            <span class=\"hljs-attr\">&quot;analyzing_range_alternatives&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>                <span class=\"hljs-attr\">&quot;range_scan_alternatives&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">&#123;</span><br>                    <span class=\"hljs-attr\">&quot;index&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;idx_summary_id&quot;</span><span class=\"hljs-punctuation\">,</span><br>                    <span class=\"hljs-attr\">&quot;ranges&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">&quot;108 &lt;= summary_id &lt;= 108&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;156 &lt;= summary_id &lt;= 156&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;166 &lt;= summary_id &lt;= 166&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;167 &lt;= summary_id &lt;= 167&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;168 &lt;= summary_id &lt;= 168&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;170 &lt;= summary_id &lt;= 170&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;172 &lt;= summary_id &lt;= 172&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;174 &lt;= summary_id &lt;= 174&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;176 &lt;= summary_id &lt;= 176&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;178 &lt;= summary_id &lt;= 178&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;179 &lt;= summary_id &lt;= 179&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;193 &lt;= summary_id &lt;= 193&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;196 &lt;= summary_id &lt;= 196&quot;</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span><br>                    <span class=\"hljs-attr\">&quot;index_dives_for_eq_ranges&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">false</span><span class=\"hljs-punctuation\">,</span>   # 是否使用index dive<br>                    <span class=\"hljs-attr\">&quot;rowid_ordered&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">false</span><span class=\"hljs-punctuation\">,</span>  # 使用该索引获取的记录是否按照主键排序<br>                    <span class=\"hljs-attr\">&quot;using_mrr&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span><span class=\"hljs-punctuation\">,</span># 是否使用mrr<br>                    <span class=\"hljs-attr\">&quot;index_only&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">false</span><span class=\"hljs-punctuation\">,</span> #是否是索引覆盖访问<br>                    <span class=\"hljs-attr\">&quot;rows&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">181292241</span><span class=\"hljs-punctuation\">,</span>  #使用该索引获取的记录条数和第一步计算的扫描行数一样<br>                    <span class=\"hljs-attr\">&quot;cost&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">199000000</span><span class=\"hljs-punctuation\">,</span> # 使用该索引的成本<br>                    <span class=\"hljs-attr\">&quot;chosen&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">false</span><span class=\"hljs-punctuation\">,</span> # 是否选择该索引<br>                    <span class=\"hljs-attr\">&quot;cause&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;cost&quot;</span><br>                <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span><br>                <span class=\"hljs-attr\">&quot;analyzing_roworder_intersect&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>                    <span class=\"hljs-attr\">&quot;usable&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">false</span><span class=\"hljs-punctuation\">,</span><br>                    <span class=\"hljs-attr\">&quot;cause&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;too_few_roworder_scans&quot;</span><br>                <span class=\"hljs-punctuation\">&#125;</span><br>            <span class=\"hljs-punctuation\">&#125;</span><br>        <span class=\"hljs-punctuation\">&#125;</span><br>    <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">]</span><br><span class=\"hljs-punctuation\">&#125;</span><br><br>#最终使用的查询计划，可以看到使用全表扫描<br><span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-attr\">&quot;considered_execution_plans&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">&#123;</span><br>        <span class=\"hljs-attr\">&quot;plan_prefix&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;table&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;`btb_bid_user_apply`&quot;</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;best_access_path&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>            <span class=\"hljs-attr\">&quot;considered_access_paths&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">&#123;</span><br>                <span class=\"hljs-attr\">&quot;rows_to_scan&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">13945557</span><span class=\"hljs-punctuation\">,</span><br>                <span class=\"hljs-attr\">&quot;access_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;scan&quot;</span><span class=\"hljs-punctuation\">,</span><br>                <span class=\"hljs-attr\">&quot;resulting_rows&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">13900000</span><span class=\"hljs-punctuation\">,</span><br>                <span class=\"hljs-attr\">&quot;cost&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">2870000</span><span class=\"hljs-punctuation\">,</span> <br>                <span class=\"hljs-attr\">&quot;chosen&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span><br>            <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">]</span><br>        <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;condition_filtering_pct&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">100</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;rows_for_plan&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">13900000</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;cost_for_plan&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">2870000</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;chosen&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span><br>    <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">]</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><pre><code>第三步 解释和验证查询成本\n</code></pre>\n<ul>\n<li><pre><code>MySQL 将 IO 成本设为1，cpu 判断成本设为0.2。IO成本是扫描一页的成本，对于回表操作的IO成本是每回表一次相当于一次磁盘IO\n</code></pre>\n</li>\n<li><pre><code>扫描全表的计算方式 （ 聚簇索引叶子节点数 * 1  + 1） + （记录数*0.2+1）, 聚簇索引叶子节点数  通过show table status like &quot;%btb_bid_user_apply%&quot;  中的 Data_length / 16/1024 计算得出，本次查询的  聚簇索引叶子节点数大概为 646971392/16/1024=39488，成本为：39488 + 13945557*0.2 =2828599，接近于查询成本分析的 2870000\n</code></pre>\n</li>\n<li><pre><code>通过查询索引 idx_summary_id 成本： 181292241*1 + ( 181292241*0.2 ) =217550689，与查询成本分析 199000000 多了一千七百多万，暂时还不清楚具体原因\n</code></pre>\n<ul>\n<li><pre><code>181292241*1 表示 回表的IO成本\n</code></pre>\n</li>\n<li><pre><code> ( 181292241*0.2 ) 表示回表之后 cpu 计算的成本\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><ul>\n<li>关于in 能不能用到索引 主要还是看 使用索引的成本的全表扫描成本那个小<ul>\n<li><p>全表扫描成本：（ 聚簇索引叶子节点数 * 1 + 1） + （记录数*0.2+1） </p>\n<ul>\n<li>聚簇索引叶子节点数：通过show table status like “%btb_bid_user_apply%”  中的 Data_length &#x2F; 16&#x2F;1024 计算得出</li>\n</ul>\n</li>\n<li><p>查询索引的成本：当in语句中的参数个数小于系统变量eq_range_index_dive_limit 使用index dive 否则使用索引统计数据</p>\n<ul>\n<li><p>index dive：是计算单个区间节点的对应索引记录数的一种方式，其主要原理是先获取索引对应的<code>B+</code>树的<code>区间最左记录</code>和<code>区间最右记录</code>，然后再计算这两条记录之间有多少记录（记录条数少的时候可以做到精确计算，多的时候只能估算）。这种通过直接访问索引对应的<code>B+</code>树来计算某个范围区间对应的索引记录条数的方式称之为<code>index dive</code></p>\n</li>\n<li><p>单个区间节点是 in查询会转换的范围查</p>\n</li>\n<li><p>索引统计数据 是 用估算的方式来计算出单个区间节点对应的索引记录数量，涉及到两个值，Cardinality（索引基数，通过show index from table_name） 和 Rows（总记录数 通过 show table status like “%table_name%”;） 总记录数&#x2F;索引基数*in语句中的参数个数&#x3D;估算的扫描条数；</p>\n</li>\n<li><p>查询成本 &#x3D; 估算的扫描条数*1 + （估算的扫描条数 *0.2）</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"一些名词","date":"2018-09-29T14:58:24.000Z","banner_img":"https://cdn.wallpaperhub.app/cloudcache/7/2/8/2/3/f/72823f97f75d73b9fc54a239c22e4ff138550a32.jpg","index_img":"https://cdn.wallpaperhub.app/cloudcache/3/7/d/d/f/a/37ddfa6ed73f24693ab3f7008476a4cc44ae3a63.jpg","_content":"\n网络七层协议\nOSI是一个开放性的通信系统互连参考模型，他是一个定义得非常好的协议规范。OSI模型有7层结构，每层都可以有几个子层。 OSI的7层从上到下分别是 \n- 应用层 \n- 表示层\n- 会话层\n- 传输层\n- 网络层\n- 数据链路层 网卡\n- 物理层  网线\n\n其中高层（即7、6、5、4层）定义了应用程序的功能，下面3层（即3、2、1层）主要面向通过网络的端到端的数据流\n\nMAC层也就是数据链路层  全称 Medium Access Control  媒体访问控制，\n可以解决多人同时发消息的问题，如果有人在发消息 那就等会儿再发 这就是随机接入协议， 以太网(Ethernet)就是这样的\n\n\nCIDR \n ip地址的表示方式 192.168.1.23/24 这就是一个CIDR类型的IP地址 ，主要是因为起初给ip地址划分了五大类，后来觉得不太合适，可以用来计算一个ip地址和另一个ip不是是一个网段的，上线的那个ip 的子网掩码是 255.255.255.0 ，192.168.1.0 就是这个网络id 23是主机id, 192.168.1.1是起始ip 192.168.1.255是最大ip.\n\nDHCP 协议\n自动获取ip,相当于是一个房产中介，有需要ip地址的时候给租一个，还有续租，过期，广播这些东西\n\nPEX协议 \n批量安装操作系统的\n\nARP 协议 \n通过广播的方式获取mac地址，\n\n\nSTP协议\n可以解决环路问题，通过比较式算法 把环状网络变成树状网络，什么是环路？就是说当需要进行广播的时候，两个交换机都连着两个网络，寻找mac地址的时候会形成一个闭环\n\nVLAN\n虚拟局域网 ，在原来的二层头上加一个Tag,VLANId  一共有12位，可以有 4096个虚拟局域网，当网络包到达交换机的时候 会把二层的 VLANID 取出来 只转发到相同VLANID的主机\n\nping\nping 是基于icmp（Internet Control Message Protocol 互联网控制报文协议）协议工作的， icmp 报文封装在ip包里边，\n","source":"_posts/names.md","raw":"---\ntitle: 一些名词\ndate: 2018-09-29 22:58:24\ntags:\ncategories: \n  - 技术笔记\n  - 网络\nbanner_img: https://cdn.wallpaperhub.app/cloudcache/7/2/8/2/3/f/72823f97f75d73b9fc54a239c22e4ff138550a32.jpg\nindex_img: https://cdn.wallpaperhub.app/cloudcache/3/7/d/d/f/a/37ddfa6ed73f24693ab3f7008476a4cc44ae3a63.jpg\n---\n\n网络七层协议\nOSI是一个开放性的通信系统互连参考模型，他是一个定义得非常好的协议规范。OSI模型有7层结构，每层都可以有几个子层。 OSI的7层从上到下分别是 \n- 应用层 \n- 表示层\n- 会话层\n- 传输层\n- 网络层\n- 数据链路层 网卡\n- 物理层  网线\n\n其中高层（即7、6、5、4层）定义了应用程序的功能，下面3层（即3、2、1层）主要面向通过网络的端到端的数据流\n\nMAC层也就是数据链路层  全称 Medium Access Control  媒体访问控制，\n可以解决多人同时发消息的问题，如果有人在发消息 那就等会儿再发 这就是随机接入协议， 以太网(Ethernet)就是这样的\n\n\nCIDR \n ip地址的表示方式 192.168.1.23/24 这就是一个CIDR类型的IP地址 ，主要是因为起初给ip地址划分了五大类，后来觉得不太合适，可以用来计算一个ip地址和另一个ip不是是一个网段的，上线的那个ip 的子网掩码是 255.255.255.0 ，192.168.1.0 就是这个网络id 23是主机id, 192.168.1.1是起始ip 192.168.1.255是最大ip.\n\nDHCP 协议\n自动获取ip,相当于是一个房产中介，有需要ip地址的时候给租一个，还有续租，过期，广播这些东西\n\nPEX协议 \n批量安装操作系统的\n\nARP 协议 \n通过广播的方式获取mac地址，\n\n\nSTP协议\n可以解决环路问题，通过比较式算法 把环状网络变成树状网络，什么是环路？就是说当需要进行广播的时候，两个交换机都连着两个网络，寻找mac地址的时候会形成一个闭环\n\nVLAN\n虚拟局域网 ，在原来的二层头上加一个Tag,VLANId  一共有12位，可以有 4096个虚拟局域网，当网络包到达交换机的时候 会把二层的 VLANID 取出来 只转发到相同VLANID的主机\n\nping\nping 是基于icmp（Internet Control Message Protocol 互联网控制报文协议）协议工作的， icmp 报文封装在ip包里边，\n","slug":"names","published":1,"updated":"2023-03-15T08:45:10.638Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf9h81dq0006qmfybpvdhcao","content":"<p>网络七层协议<br>OSI是一个开放性的通信系统互连参考模型，他是一个定义得非常好的协议规范。OSI模型有7层结构，每层都可以有几个子层。 OSI的7层从上到下分别是 </p>\n<ul>\n<li>应用层 </li>\n<li>表示层</li>\n<li>会话层</li>\n<li>传输层</li>\n<li>网络层</li>\n<li>数据链路层 网卡</li>\n<li>物理层  网线</li>\n</ul>\n<p>其中高层（即7、6、5、4层）定义了应用程序的功能，下面3层（即3、2、1层）主要面向通过网络的端到端的数据流</p>\n<p>MAC层也就是数据链路层  全称 Medium Access Control  媒体访问控制，<br>可以解决多人同时发消息的问题，如果有人在发消息 那就等会儿再发 这就是随机接入协议， 以太网(Ethernet)就是这样的</p>\n<p>CIDR<br> ip地址的表示方式 192.168.1.23&#x2F;24 这就是一个CIDR类型的IP地址 ，主要是因为起初给ip地址划分了五大类，后来觉得不太合适，可以用来计算一个ip地址和另一个ip不是是一个网段的，上线的那个ip 的子网掩码是 255.255.255.0 ，192.168.1.0 就是这个网络id 23是主机id, 192.168.1.1是起始ip 192.168.1.255是最大ip.</p>\n<p>DHCP 协议<br>自动获取ip,相当于是一个房产中介，有需要ip地址的时候给租一个，还有续租，过期，广播这些东西</p>\n<p>PEX协议<br>批量安装操作系统的</p>\n<p>ARP 协议<br>通过广播的方式获取mac地址，</p>\n<p>STP协议<br>可以解决环路问题，通过比较式算法 把环状网络变成树状网络，什么是环路？就是说当需要进行广播的时候，两个交换机都连着两个网络，寻找mac地址的时候会形成一个闭环</p>\n<p>VLAN<br>虚拟局域网 ，在原来的二层头上加一个Tag,VLANId  一共有12位，可以有 4096个虚拟局域网，当网络包到达交换机的时候 会把二层的 VLANID 取出来 只转发到相同VLANID的主机</p>\n<p>ping<br>ping 是基于icmp（Internet Control Message Protocol 互联网控制报文协议）协议工作的， icmp 报文封装在ip包里边，</p>\n","site":{"data":{}},"wordcount":792,"excerpt":"","more":"<p>网络七层协议<br>OSI是一个开放性的通信系统互连参考模型，他是一个定义得非常好的协议规范。OSI模型有7层结构，每层都可以有几个子层。 OSI的7层从上到下分别是 </p>\n<ul>\n<li>应用层 </li>\n<li>表示层</li>\n<li>会话层</li>\n<li>传输层</li>\n<li>网络层</li>\n<li>数据链路层 网卡</li>\n<li>物理层  网线</li>\n</ul>\n<p>其中高层（即7、6、5、4层）定义了应用程序的功能，下面3层（即3、2、1层）主要面向通过网络的端到端的数据流</p>\n<p>MAC层也就是数据链路层  全称 Medium Access Control  媒体访问控制，<br>可以解决多人同时发消息的问题，如果有人在发消息 那就等会儿再发 这就是随机接入协议， 以太网(Ethernet)就是这样的</p>\n<p>CIDR<br> ip地址的表示方式 192.168.1.23&#x2F;24 这就是一个CIDR类型的IP地址 ，主要是因为起初给ip地址划分了五大类，后来觉得不太合适，可以用来计算一个ip地址和另一个ip不是是一个网段的，上线的那个ip 的子网掩码是 255.255.255.0 ，192.168.1.0 就是这个网络id 23是主机id, 192.168.1.1是起始ip 192.168.1.255是最大ip.</p>\n<p>DHCP 协议<br>自动获取ip,相当于是一个房产中介，有需要ip地址的时候给租一个，还有续租，过期，广播这些东西</p>\n<p>PEX协议<br>批量安装操作系统的</p>\n<p>ARP 协议<br>通过广播的方式获取mac地址，</p>\n<p>STP协议<br>可以解决环路问题，通过比较式算法 把环状网络变成树状网络，什么是环路？就是说当需要进行广播的时候，两个交换机都连着两个网络，寻找mac地址的时候会形成一个闭环</p>\n<p>VLAN<br>虚拟局域网 ，在原来的二层头上加一个Tag,VLANId  一共有12位，可以有 4096个虚拟局域网，当网络包到达交换机的时候 会把二层的 VLANID 取出来 只转发到相同VLANID的主机</p>\n<p>ping<br>ping 是基于icmp（Internet Control Message Protocol 互联网控制报文协议）协议工作的， icmp 报文封装在ip包里边，</p>\n"},{"title":"Tcp中的GBN","date":"2021-09-09T07:50:24.000Z","banner_img":"https://cdn.wallpaperhub.app/cloudcache/5/5/f/5/1/4/55f5149ba5091818e9f55538bd7e3f3e2da24baa.jpg","index_img":"https://cdn.wallpaperhub.app/cloudcache/0/3/c/5/5/7/03c557841515d62828bca77ce811edd4cafef3af.jpg","_content":"Tcp 中的 GBN(go back n ,回退N步)\n```php\n$pckData = [1,2,3,4,5,6];\n// 发送端 用到的变量\n$n = 4; // 窗口大小\n$base = 1; // 下一个待确认的分组 表示 此分组之前的 数据组都已收到\n$nextseq = 1;// 下一个待发送的数据组\n$wNum = 4; // 最大允许发送的 数据组 表示 nextSeq <= wNum\n\n// 接收端用到的变量\n$expectedseqnum = 0; // 表示 此前的分组都已收到，下个收到的分组 应该是 $expectedseqnum +1， 如果不是 就忽略返回 ack = $expectedseqnum\n\n// step 1  发送 编号为 1  的数据报\n$c = [[1,2,3,4],[5,6]];\n$base = 1;\n$nextseq = 2;\n$wNum = 4;\n\n// step 2  发送 编号为 1  的数据报\n$c = [[1,2,3,4],[5,6]];\n$base = 1;\n$nextseq = 3;\n$wNum = 4;\n\n// step 3  发送 编号为 3  的数据报\n$c = [[1,2,3,4],[5,6]];\n$base = 1;\n$nextseq = 4;\n$wNum = 4;\n\n// 收到接受方 ack = 1($expectedseqnum = 1)\n$base = 2;\n$wNum = 5;// 窗口向右滑动 一\n\n// step 2  发送超时\n\n// 接受方售后编号为 3  的数据报 丢弃 返回 ack =1\n\n// step 3  发送 编号为 3  的数据报\n$c = [1,[2,3,4,5],[5,6]];\n$base = 1;\n$nextseq = 5;\n$wNum = 5;\n//$nextseq == $wNum  启动 计时 没有收到接收端 返回的ack =2 超时，重新发送 2，3，4，5\n```\n\n![72068A22-4A3F-48CE-B11B-37F24CAFFC64](https://tva1.sinaimg.cn/large/e6c9d24ely1h1ptqc0a1oj20ej0laab8.jpg)\n\n","source":"_posts/tcp-gbn.md","raw":"---\ntitle: Tcp中的GBN\ndate: 2021-09-09 15:50:24\ntags: 网络\ncategories: \n  - 技术笔记\n  - 网络\nbanner_img: https://cdn.wallpaperhub.app/cloudcache/5/5/f/5/1/4/55f5149ba5091818e9f55538bd7e3f3e2da24baa.jpg\nindex_img: https://cdn.wallpaperhub.app/cloudcache/0/3/c/5/5/7/03c557841515d62828bca77ce811edd4cafef3af.jpg\n---\nTcp 中的 GBN(go back n ,回退N步)\n```php\n$pckData = [1,2,3,4,5,6];\n// 发送端 用到的变量\n$n = 4; // 窗口大小\n$base = 1; // 下一个待确认的分组 表示 此分组之前的 数据组都已收到\n$nextseq = 1;// 下一个待发送的数据组\n$wNum = 4; // 最大允许发送的 数据组 表示 nextSeq <= wNum\n\n// 接收端用到的变量\n$expectedseqnum = 0; // 表示 此前的分组都已收到，下个收到的分组 应该是 $expectedseqnum +1， 如果不是 就忽略返回 ack = $expectedseqnum\n\n// step 1  发送 编号为 1  的数据报\n$c = [[1,2,3,4],[5,6]];\n$base = 1;\n$nextseq = 2;\n$wNum = 4;\n\n// step 2  发送 编号为 1  的数据报\n$c = [[1,2,3,4],[5,6]];\n$base = 1;\n$nextseq = 3;\n$wNum = 4;\n\n// step 3  发送 编号为 3  的数据报\n$c = [[1,2,3,4],[5,6]];\n$base = 1;\n$nextseq = 4;\n$wNum = 4;\n\n// 收到接受方 ack = 1($expectedseqnum = 1)\n$base = 2;\n$wNum = 5;// 窗口向右滑动 一\n\n// step 2  发送超时\n\n// 接受方售后编号为 3  的数据报 丢弃 返回 ack =1\n\n// step 3  发送 编号为 3  的数据报\n$c = [1,[2,3,4,5],[5,6]];\n$base = 1;\n$nextseq = 5;\n$wNum = 5;\n//$nextseq == $wNum  启动 计时 没有收到接收端 返回的ack =2 超时，重新发送 2，3，4，5\n```\n\n![72068A22-4A3F-48CE-B11B-37F24CAFFC64](https://tva1.sinaimg.cn/large/e6c9d24ely1h1ptqc0a1oj20ej0laab8.jpg)\n\n","slug":"tcp-gbn","published":1,"updated":"2023-03-15T08:47:05.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf9h81dr0007qmfy930x89sh","content":"<p>Tcp 中的 GBN(go back n ,回退N步)</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><div class=\"code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></div></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-variable\">$pckData</span> = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>];<br><span class=\"hljs-comment\">// 发送端 用到的变量</span><br><span class=\"hljs-variable\">$n</span> = <span class=\"hljs-number\">4</span>; <span class=\"hljs-comment\">// 窗口大小</span><br><span class=\"hljs-variable\">$base</span> = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 下一个待确认的分组 表示 此分组之前的 数据组都已收到</span><br><span class=\"hljs-variable\">$nextseq</span> = <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">// 下一个待发送的数据组</span><br><span class=\"hljs-variable\">$wNum</span> = <span class=\"hljs-number\">4</span>; <span class=\"hljs-comment\">// 最大允许发送的 数据组 表示 nextSeq &lt;= wNum</span><br><br><span class=\"hljs-comment\">// 接收端用到的变量</span><br><span class=\"hljs-variable\">$expectedseqnum</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 表示 此前的分组都已收到，下个收到的分组 应该是 $expectedseqnum +1， 如果不是 就忽略返回 ack = $expectedseqnum</span><br><br><span class=\"hljs-comment\">// step 1  发送 编号为 1  的数据报</span><br><span class=\"hljs-variable\">$c</span> = [[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>],[<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>]];<br><span class=\"hljs-variable\">$base</span> = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-variable\">$nextseq</span> = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-variable\">$wNum</span> = <span class=\"hljs-number\">4</span>;<br><br><span class=\"hljs-comment\">// step 2  发送 编号为 1  的数据报</span><br><span class=\"hljs-variable\">$c</span> = [[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>],[<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>]];<br><span class=\"hljs-variable\">$base</span> = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-variable\">$nextseq</span> = <span class=\"hljs-number\">3</span>;<br><span class=\"hljs-variable\">$wNum</span> = <span class=\"hljs-number\">4</span>;<br><br><span class=\"hljs-comment\">// step 3  发送 编号为 3  的数据报</span><br><span class=\"hljs-variable\">$c</span> = [[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>],[<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>]];<br><span class=\"hljs-variable\">$base</span> = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-variable\">$nextseq</span> = <span class=\"hljs-number\">4</span>;<br><span class=\"hljs-variable\">$wNum</span> = <span class=\"hljs-number\">4</span>;<br><br><span class=\"hljs-comment\">// 收到接受方 ack = 1($expectedseqnum = 1)</span><br><span class=\"hljs-variable\">$base</span> = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-variable\">$wNum</span> = <span class=\"hljs-number\">5</span>;<span class=\"hljs-comment\">// 窗口向右滑动 一</span><br><br><span class=\"hljs-comment\">// step 2  发送超时</span><br><br><span class=\"hljs-comment\">// 接受方售后编号为 3  的数据报 丢弃 返回 ack =1</span><br><br><span class=\"hljs-comment\">// step 3  发送 编号为 3  的数据报</span><br><span class=\"hljs-variable\">$c</span> = [<span class=\"hljs-number\">1</span>,[<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>],[<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>]];<br><span class=\"hljs-variable\">$base</span> = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-variable\">$nextseq</span> = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-variable\">$wNum</span> = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-comment\">//$nextseq == $wNum  启动 计时 没有收到接收端 返回的ack =2 超时，重新发送 2，3，4，5</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1h1ptqc0a1oj20ej0laab8.jpg\" alt=\"72068A22-4A3F-48CE-B11B-37F24CAFFC64\"></p>\n","site":{"data":{}},"wordcount":737,"excerpt":"","more":"<p>Tcp 中的 GBN(go back n ,回退N步)</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-variable\">$pckData</span> = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>];<br><span class=\"hljs-comment\">// 发送端 用到的变量</span><br><span class=\"hljs-variable\">$n</span> = <span class=\"hljs-number\">4</span>; <span class=\"hljs-comment\">// 窗口大小</span><br><span class=\"hljs-variable\">$base</span> = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 下一个待确认的分组 表示 此分组之前的 数据组都已收到</span><br><span class=\"hljs-variable\">$nextseq</span> = <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">// 下一个待发送的数据组</span><br><span class=\"hljs-variable\">$wNum</span> = <span class=\"hljs-number\">4</span>; <span class=\"hljs-comment\">// 最大允许发送的 数据组 表示 nextSeq &lt;= wNum</span><br><br><span class=\"hljs-comment\">// 接收端用到的变量</span><br><span class=\"hljs-variable\">$expectedseqnum</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 表示 此前的分组都已收到，下个收到的分组 应该是 $expectedseqnum +1， 如果不是 就忽略返回 ack = $expectedseqnum</span><br><br><span class=\"hljs-comment\">// step 1  发送 编号为 1  的数据报</span><br><span class=\"hljs-variable\">$c</span> = [[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>],[<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>]];<br><span class=\"hljs-variable\">$base</span> = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-variable\">$nextseq</span> = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-variable\">$wNum</span> = <span class=\"hljs-number\">4</span>;<br><br><span class=\"hljs-comment\">// step 2  发送 编号为 1  的数据报</span><br><span class=\"hljs-variable\">$c</span> = [[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>],[<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>]];<br><span class=\"hljs-variable\">$base</span> = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-variable\">$nextseq</span> = <span class=\"hljs-number\">3</span>;<br><span class=\"hljs-variable\">$wNum</span> = <span class=\"hljs-number\">4</span>;<br><br><span class=\"hljs-comment\">// step 3  发送 编号为 3  的数据报</span><br><span class=\"hljs-variable\">$c</span> = [[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>],[<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>]];<br><span class=\"hljs-variable\">$base</span> = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-variable\">$nextseq</span> = <span class=\"hljs-number\">4</span>;<br><span class=\"hljs-variable\">$wNum</span> = <span class=\"hljs-number\">4</span>;<br><br><span class=\"hljs-comment\">// 收到接受方 ack = 1($expectedseqnum = 1)</span><br><span class=\"hljs-variable\">$base</span> = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-variable\">$wNum</span> = <span class=\"hljs-number\">5</span>;<span class=\"hljs-comment\">// 窗口向右滑动 一</span><br><br><span class=\"hljs-comment\">// step 2  发送超时</span><br><br><span class=\"hljs-comment\">// 接受方售后编号为 3  的数据报 丢弃 返回 ack =1</span><br><br><span class=\"hljs-comment\">// step 3  发送 编号为 3  的数据报</span><br><span class=\"hljs-variable\">$c</span> = [<span class=\"hljs-number\">1</span>,[<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>],[<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>]];<br><span class=\"hljs-variable\">$base</span> = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-variable\">$nextseq</span> = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-variable\">$wNum</span> = <span class=\"hljs-number\">5</span>;<br><span class=\"hljs-comment\">//$nextseq == $wNum  启动 计时 没有收到接收端 返回的ack =2 超时，重新发送 2，3，4，5</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1h1ptqc0a1oj20ej0laab8.jpg\" alt=\"72068A22-4A3F-48CE-B11B-37F24CAFFC64\"></p>\n"},{"title":"Tcp中的SR(选择重传)","date":"2021-09-09T07:09:13.000Z","banner_img":"https://cdn.wallpaperhub.app/cloudcache/6/4/c/b/f/b/64cbfbcb69a590c8d42fdb09dccb7b69f7f40cb3.jpg","index_img":"https://cdn.wallpaperhub.app/cloudcache/a/9/a/2/a/9/a9a2a931999de2c4ba7dc6575ffcc9a85e2eaef2.jpg","_content":"\nTCP 中的 SR(选择重传)\n\n![2295E331-B060-4C01-B178-3FDF05FC2691](https://tva1.sinaimg.cn/large/e6c9d24ely1h1ptkk5w23j20o30mlabq.jpg)","source":"_posts/tcp-sr.md","raw":"---\ntitle: Tcp中的SR(选择重传)\ndate: 2021-09-09 15:09:13\ntags: 网络\ncategories: \n  - 技术笔记\n  - 网络\nbanner_img: https://cdn.wallpaperhub.app/cloudcache/6/4/c/b/f/b/64cbfbcb69a590c8d42fdb09dccb7b69f7f40cb3.jpg\nindex_img: https://cdn.wallpaperhub.app/cloudcache/a/9/a/2/a/9/a9a2a931999de2c4ba7dc6575ffcc9a85e2eaef2.jpg\n---\n\nTCP 中的 SR(选择重传)\n\n![2295E331-B060-4C01-B178-3FDF05FC2691](https://tva1.sinaimg.cn/large/e6c9d24ely1h1ptkk5w23j20o30mlabq.jpg)","slug":"tcp-sr","published":1,"updated":"2023-03-15T08:48:22.779Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf9h81du000bqmfydjdn3xdo","content":"<p>TCP 中的 SR(选择重传)</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1h1ptkk5w23j20o30mlabq.jpg\" alt=\"2295E331-B060-4C01-B178-3FDF05FC2691\"></p>\n","site":{"data":{}},"wordcount":13,"excerpt":"","more":"<p>TCP 中的 SR(选择重传)</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/e6c9d24ely1h1ptkk5w23j20o30mlabq.jpg\" alt=\"2295E331-B060-4C01-B178-3FDF05FC2691\"></p>\n"},{"title":"Tcp小结","date":"2021-09-16T09:04:23.000Z","banner_img":"https://cdn.wallpaperhub.app/cloudcache/a/4/8/8/1/b/a4881b58185419b3ceab68e01a64748ddfc19581.jpg","index_img":"https://cdn.wallpaperhub.app/cloudcache/b/f/2/c/5/5/bf2c559f1160bc0c04fe922f7243868208be3cb0.jpg","_content":"\n#### tcp 是基于连接、可靠的传输层的应用协议\n\n- 基于连接\n    - 通过3次握手建立连接\n        - 客户端（包序号：seq=1 标志位：syn ）发起请求\n        - 服务端（回复收到N字节之前的数据 ack=1 包序号 seq=1 标志位 syn ）回复请求\n        - 客户端 （包序号：seq=1 ack=1）回复服务端，建立请求\n        - 建立连接后服务端分配 连接缓存  变量信息\n\n    - 通过4次挥手断开连接\n        - 服务端（报序号 seq=x 标志位 fin）\n        - 客户端（ack=x）\n        - 客户端（seq=y ack=x 标志位 fin）\n        - 服务端（ack=y）\n    \n- 可靠\n    - 基于回退N补和选择重传协议，保证数据到达\n\n- 拥塞控制\n    - 保证发送端的速率 (cwnd= 拥塞窗口大小， rwnd=接受窗口大小，发送速率min(cwnd, rwnd))\n        - 1、慢启动\n            - 初始发送速率为 MSS 每收到一个ack 发送速率就翻倍，指数增加,ssthresh = cwnd/2\n        - 2、拥塞避免\n            - 遇到超时 或者 3个冗余ACK 发送速率减为 1 \n        - 3、快递重启\n            - 每个RTT 增加一个MSS 逐渐增加至ssthresh","source":"_posts/tcp.md","raw":"---\ntitle: Tcp小结\ndate: 2021-09-16 17:04:23\ntags: 网络\ncategories: \n  - 技术笔记\n  - 网络\nbanner_img: https://cdn.wallpaperhub.app/cloudcache/a/4/8/8/1/b/a4881b58185419b3ceab68e01a64748ddfc19581.jpg\nindex_img: https://cdn.wallpaperhub.app/cloudcache/b/f/2/c/5/5/bf2c559f1160bc0c04fe922f7243868208be3cb0.jpg\n---\n\n#### tcp 是基于连接、可靠的传输层的应用协议\n\n- 基于连接\n    - 通过3次握手建立连接\n        - 客户端（包序号：seq=1 标志位：syn ）发起请求\n        - 服务端（回复收到N字节之前的数据 ack=1 包序号 seq=1 标志位 syn ）回复请求\n        - 客户端 （包序号：seq=1 ack=1）回复服务端，建立请求\n        - 建立连接后服务端分配 连接缓存  变量信息\n\n    - 通过4次挥手断开连接\n        - 服务端（报序号 seq=x 标志位 fin）\n        - 客户端（ack=x）\n        - 客户端（seq=y ack=x 标志位 fin）\n        - 服务端（ack=y）\n    \n- 可靠\n    - 基于回退N补和选择重传协议，保证数据到达\n\n- 拥塞控制\n    - 保证发送端的速率 (cwnd= 拥塞窗口大小， rwnd=接受窗口大小，发送速率min(cwnd, rwnd))\n        - 1、慢启动\n            - 初始发送速率为 MSS 每收到一个ack 发送速率就翻倍，指数增加,ssthresh = cwnd/2\n        - 2、拥塞避免\n            - 遇到超时 或者 3个冗余ACK 发送速率减为 1 \n        - 3、快递重启\n            - 每个RTT 增加一个MSS 逐渐增加至ssthresh","slug":"tcp","published":1,"updated":"2023-03-15T08:46:27.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf9h81dv000cqmfyfyhsexdm","content":"<h4 id=\"tcp-是基于连接、可靠的传输层的应用协议\"><a href=\"#tcp-是基于连接、可靠的传输层的应用协议\" class=\"headerlink\" title=\"tcp 是基于连接、可靠的传输层的应用协议\"></a>tcp 是基于连接、可靠的传输层的应用协议</h4><ul>\n<li><p>基于连接</p>\n<ul>\n<li><p>通过3次握手建立连接</p>\n<ul>\n<li>客户端（包序号：seq&#x3D;1 标志位：syn ）发起请求</li>\n<li>服务端（回复收到N字节之前的数据 ack&#x3D;1 包序号 seq&#x3D;1 标志位 syn ）回复请求</li>\n<li>客户端 （包序号：seq&#x3D;1 ack&#x3D;1）回复服务端，建立请求</li>\n<li>建立连接后服务端分配 连接缓存  变量信息</li>\n</ul>\n</li>\n<li><p>通过4次挥手断开连接</p>\n<ul>\n<li>服务端（报序号 seq&#x3D;x 标志位 fin）</li>\n<li>客户端（ack&#x3D;x）</li>\n<li>客户端（seq&#x3D;y ack&#x3D;x 标志位 fin）</li>\n<li>服务端（ack&#x3D;y）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>可靠</p>\n<ul>\n<li>基于回退N补和选择重传协议，保证数据到达</li>\n</ul>\n</li>\n<li><p>拥塞控制</p>\n<ul>\n<li>保证发送端的速率 (cwnd&#x3D; 拥塞窗口大小， rwnd&#x3D;接受窗口大小，发送速率min(cwnd, rwnd))<ul>\n<li>1、慢启动<ul>\n<li>初始发送速率为 MSS 每收到一个ack 发送速率就翻倍，指数增加,ssthresh &#x3D; cwnd&#x2F;2</li>\n</ul>\n</li>\n<li>2、拥塞避免<ul>\n<li>遇到超时 或者 3个冗余ACK 发送速率减为 1</li>\n</ul>\n</li>\n<li>3、快递重启<ul>\n<li>每个RTT 增加一个MSS 逐渐增加至ssthresh</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"wordcount":472,"excerpt":"","more":"<h4 id=\"tcp-是基于连接、可靠的传输层的应用协议\"><a href=\"#tcp-是基于连接、可靠的传输层的应用协议\" class=\"headerlink\" title=\"tcp 是基于连接、可靠的传输层的应用协议\"></a>tcp 是基于连接、可靠的传输层的应用协议</h4><ul>\n<li><p>基于连接</p>\n<ul>\n<li><p>通过3次握手建立连接</p>\n<ul>\n<li>客户端（包序号：seq&#x3D;1 标志位：syn ）发起请求</li>\n<li>服务端（回复收到N字节之前的数据 ack&#x3D;1 包序号 seq&#x3D;1 标志位 syn ）回复请求</li>\n<li>客户端 （包序号：seq&#x3D;1 ack&#x3D;1）回复服务端，建立请求</li>\n<li>建立连接后服务端分配 连接缓存  变量信息</li>\n</ul>\n</li>\n<li><p>通过4次挥手断开连接</p>\n<ul>\n<li>服务端（报序号 seq&#x3D;x 标志位 fin）</li>\n<li>客户端（ack&#x3D;x）</li>\n<li>客户端（seq&#x3D;y ack&#x3D;x 标志位 fin）</li>\n<li>服务端（ack&#x3D;y）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>可靠</p>\n<ul>\n<li>基于回退N补和选择重传协议，保证数据到达</li>\n</ul>\n</li>\n<li><p>拥塞控制</p>\n<ul>\n<li>保证发送端的速率 (cwnd&#x3D; 拥塞窗口大小， rwnd&#x3D;接受窗口大小，发送速率min(cwnd, rwnd))<ul>\n<li>1、慢启动<ul>\n<li>初始发送速率为 MSS 每收到一个ack 发送速率就翻倍，指数增加,ssthresh &#x3D; cwnd&#x2F;2</li>\n</ul>\n</li>\n<li>2、拥塞避免<ul>\n<li>遇到超时 或者 3个冗余ACK 发送速率减为 1</li>\n</ul>\n</li>\n<li>3、快递重启<ul>\n<li>每个RTT 增加一个MSS 逐渐增加至ssthresh</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"如何实现一个秒杀系统","date":"2022-05-17T08:21:48.000Z","banner_img":"https://cdn.wallpaperhub.app/cloudcache/8/b/1/a/b/c/8b1abc1df7600e44e2eb3c5a0c9f3d237c75fd9c.jpg","index_img":"https://cdn.wallpaperhub.app/cloudcache/6/0/4/b/b/7/604bb787c972e39a60261606937d67891edd5799.jpg","_content":"\n​\t\t最近看了极客时间的专栏<a href='https://time.geekbang.org/column/intro/100017501'>如何设计一个秒杀系统</a>，总结一下专栏中重点，方便以后复习查看。\n\n##### **设计秒杀系统需要注意以下几点**\n\n1. 数据要尽量少\n\n   > 所谓“数据要尽量少”，首先是指用户请求的数据能少就少。请求的数据包括上传给系统的数据和系统返回给用户的数据\n\n2. 路径要尽量短\n\n   > 所谓“路径”，就是用户发出请求到返回数据这个过程中，需求经过的中间的节点数。比如秒杀商品详情系统需要调用库存系统。解决多节点调用就是把RPC转换成服务内部调用。秒杀的缓存信息可以用本地缓存，**如果用Redis做缓存组件的话会增加一次Socket连接**。用本地缓存的话即减少了一次连接也符合**路径要尽量短**。使用了本地缓存动态数据需要更新就需要监听MQ来更新本地缓存的内容。\n\n3. 依赖要尽量少\n\n   > 减少弱依赖，比如不显示优惠券相关非必要信息。最近各地政府都在号召：非必要不XXX\n\n4. 不要有单点\n\n   > 系统中的单点可以说是系统架构上的一个大忌，因为单点意味着没有备份，风险不可控，我们设计分布式系统最重要的原则就是“消除单点”。\n\n​\t\t越追求极致性能，系统定制开发就会越多，同时系统的通用性也就会越差。软件开发中有一句话是“细节是魔鬼”。\n\n##### 流量削峰怎么做\n\n- 排队\n\n  > 使用消息队列来缓存瞬间的峰值流量，把同步调用改成异步的调用，，中间通过一个队列在一端承接瞬时的流量洪峰，在另一端平滑地将消息推送出去\n\n- 答题\n\n  > 一是防止部分买家使用秒杀器在参加秒杀时作弊第二个目的其实就是延缓请求。秒杀答题的逻辑主要分为 3 部分。\n\n- 分层过滤\n\n  >分层校验的目的是：在读系统中，尽量减少由于一致性校验带来的系统瓶颈，但是尽量将不影响性能的检查条件提前，如用户是否具有秒杀资格、商品状态是否正常、用户答题是否正确、秒杀是否已经结束、是否非法请求、营销等价物是否充足等；在写数据系统中，主要对写的数据（如“库存”）做一致性检查，最后在数据库层保证数据的最终准确性（如“库存”不能减为负数）。\n\n##### \t\n\n##### 秒杀的一种实现方案\n\n1. 提前设置好秒杀商品缓存\n2. 前端限流，3秒内只提交一个请求，静态资源存放于 CDN。\n3. 后端 redis 对 uid 限流，同样 3 秒内提交一个请求。 \n4. 请求保存队列，队列长度为库存 2 倍。防止前面预订失败，后面补上。\n5. 队列满后，后续请求直接返回秒杀结束。\n6. 消费线程消费队列内容，下订单，直接操作 MySQL 扣库存。\n\n","source":"_posts/spike.md","raw":"---\ntitle: 如何实现一个秒杀系统\ndate: 2022-05-17 16:21:48\ntags:\ncategories: \n  - 读书笔记\nbanner_img: https://cdn.wallpaperhub.app/cloudcache/8/b/1/a/b/c/8b1abc1df7600e44e2eb3c5a0c9f3d237c75fd9c.jpg\nindex_img: https://cdn.wallpaperhub.app/cloudcache/6/0/4/b/b/7/604bb787c972e39a60261606937d67891edd5799.jpg\n---\n\n​\t\t最近看了极客时间的专栏<a href='https://time.geekbang.org/column/intro/100017501'>如何设计一个秒杀系统</a>，总结一下专栏中重点，方便以后复习查看。\n\n##### **设计秒杀系统需要注意以下几点**\n\n1. 数据要尽量少\n\n   > 所谓“数据要尽量少”，首先是指用户请求的数据能少就少。请求的数据包括上传给系统的数据和系统返回给用户的数据\n\n2. 路径要尽量短\n\n   > 所谓“路径”，就是用户发出请求到返回数据这个过程中，需求经过的中间的节点数。比如秒杀商品详情系统需要调用库存系统。解决多节点调用就是把RPC转换成服务内部调用。秒杀的缓存信息可以用本地缓存，**如果用Redis做缓存组件的话会增加一次Socket连接**。用本地缓存的话即减少了一次连接也符合**路径要尽量短**。使用了本地缓存动态数据需要更新就需要监听MQ来更新本地缓存的内容。\n\n3. 依赖要尽量少\n\n   > 减少弱依赖，比如不显示优惠券相关非必要信息。最近各地政府都在号召：非必要不XXX\n\n4. 不要有单点\n\n   > 系统中的单点可以说是系统架构上的一个大忌，因为单点意味着没有备份，风险不可控，我们设计分布式系统最重要的原则就是“消除单点”。\n\n​\t\t越追求极致性能，系统定制开发就会越多，同时系统的通用性也就会越差。软件开发中有一句话是“细节是魔鬼”。\n\n##### 流量削峰怎么做\n\n- 排队\n\n  > 使用消息队列来缓存瞬间的峰值流量，把同步调用改成异步的调用，，中间通过一个队列在一端承接瞬时的流量洪峰，在另一端平滑地将消息推送出去\n\n- 答题\n\n  > 一是防止部分买家使用秒杀器在参加秒杀时作弊第二个目的其实就是延缓请求。秒杀答题的逻辑主要分为 3 部分。\n\n- 分层过滤\n\n  >分层校验的目的是：在读系统中，尽量减少由于一致性校验带来的系统瓶颈，但是尽量将不影响性能的检查条件提前，如用户是否具有秒杀资格、商品状态是否正常、用户答题是否正确、秒杀是否已经结束、是否非法请求、营销等价物是否充足等；在写数据系统中，主要对写的数据（如“库存”）做一致性检查，最后在数据库层保证数据的最终准确性（如“库存”不能减为负数）。\n\n##### \t\n\n##### 秒杀的一种实现方案\n\n1. 提前设置好秒杀商品缓存\n2. 前端限流，3秒内只提交一个请求，静态资源存放于 CDN。\n3. 后端 redis 对 uid 限流，同样 3 秒内提交一个请求。 \n4. 请求保存队列，队列长度为库存 2 倍。防止前面预订失败，后面补上。\n5. 队列满后，后续请求直接返回秒杀结束。\n6. 消费线程消费队列内容，下订单，直接操作 MySQL 扣库存。\n\n","slug":"spike","published":1,"updated":"2023-03-15T08:45:50.357Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf9h81dx000fqmfy205n3qvk","content":"<p>​\t\t最近看了极客时间的专栏<a href='https://time.geekbang.org/column/intro/100017501'>如何设计一个秒杀系统</a>，总结一下专栏中重点，方便以后复习查看。</p>\n<h5 id=\"设计秒杀系统需要注意以下几点\"><a href=\"#设计秒杀系统需要注意以下几点\" class=\"headerlink\" title=\"设计秒杀系统需要注意以下几点\"></a><strong>设计秒杀系统需要注意以下几点</strong></h5><ol>\n<li><p>数据要尽量少</p>\n<blockquote>\n<p>所谓“数据要尽量少”，首先是指用户请求的数据能少就少。请求的数据包括上传给系统的数据和系统返回给用户的数据</p>\n</blockquote>\n</li>\n<li><p>路径要尽量短</p>\n<blockquote>\n<p>所谓“路径”，就是用户发出请求到返回数据这个过程中，需求经过的中间的节点数。比如秒杀商品详情系统需要调用库存系统。解决多节点调用就是把RPC转换成服务内部调用。秒杀的缓存信息可以用本地缓存，<strong>如果用Redis做缓存组件的话会增加一次Socket连接</strong>。用本地缓存的话即减少了一次连接也符合<strong>路径要尽量短</strong>。使用了本地缓存动态数据需要更新就需要监听MQ来更新本地缓存的内容。</p>\n</blockquote>\n</li>\n<li><p>依赖要尽量少</p>\n<blockquote>\n<p>减少弱依赖，比如不显示优惠券相关非必要信息。最近各地政府都在号召：非必要不XXX</p>\n</blockquote>\n</li>\n<li><p>不要有单点</p>\n<blockquote>\n<p>系统中的单点可以说是系统架构上的一个大忌，因为单点意味着没有备份，风险不可控，我们设计分布式系统最重要的原则就是“消除单点”。</p>\n</blockquote>\n</li>\n</ol>\n<p>​\t\t越追求极致性能，系统定制开发就会越多，同时系统的通用性也就会越差。软件开发中有一句话是“细节是魔鬼”。</p>\n<h5 id=\"流量削峰怎么做\"><a href=\"#流量削峰怎么做\" class=\"headerlink\" title=\"流量削峰怎么做\"></a>流量削峰怎么做</h5><ul>\n<li><p>排队</p>\n<blockquote>\n<p>使用消息队列来缓存瞬间的峰值流量，把同步调用改成异步的调用，，中间通过一个队列在一端承接瞬时的流量洪峰，在另一端平滑地将消息推送出去</p>\n</blockquote>\n</li>\n<li><p>答题</p>\n<blockquote>\n<p>一是防止部分买家使用秒杀器在参加秒杀时作弊第二个目的其实就是延缓请求。秒杀答题的逻辑主要分为 3 部分。</p>\n</blockquote>\n</li>\n<li><p>分层过滤</p>\n<blockquote>\n<p>分层校验的目的是：在读系统中，尽量减少由于一致性校验带来的系统瓶颈，但是尽量将不影响性能的检查条件提前，如用户是否具有秒杀资格、商品状态是否正常、用户答题是否正确、秒杀是否已经结束、是否非法请求、营销等价物是否充足等；在写数据系统中，主要对写的数据（如“库存”）做一致性检查，最后在数据库层保证数据的最终准确性（如“库存”不能减为负数）。</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h5><h5 id=\"秒杀的一种实现方案\"><a href=\"#秒杀的一种实现方案\" class=\"headerlink\" title=\"秒杀的一种实现方案\"></a>秒杀的一种实现方案</h5><ol>\n<li>提前设置好秒杀商品缓存</li>\n<li>前端限流，3秒内只提交一个请求，静态资源存放于 CDN。</li>\n<li>后端 redis 对 uid 限流，同样 3 秒内提交一个请求。 </li>\n<li>请求保存队列，队列长度为库存 2 倍。防止前面预订失败，后面补上。</li>\n<li>队列满后，后续请求直接返回秒杀结束。</li>\n<li>消费线程消费队列内容，下订单，直接操作 MySQL 扣库存。</li>\n</ol>\n","site":{"data":{}},"wordcount":919,"excerpt":"","more":"<p>​\t\t最近看了极客时间的专栏<a href='https://time.geekbang.org/column/intro/100017501'>如何设计一个秒杀系统</a>，总结一下专栏中重点，方便以后复习查看。</p>\n<h5 id=\"设计秒杀系统需要注意以下几点\"><a href=\"#设计秒杀系统需要注意以下几点\" class=\"headerlink\" title=\"设计秒杀系统需要注意以下几点\"></a><strong>设计秒杀系统需要注意以下几点</strong></h5><ol>\n<li><p>数据要尽量少</p>\n<blockquote>\n<p>所谓“数据要尽量少”，首先是指用户请求的数据能少就少。请求的数据包括上传给系统的数据和系统返回给用户的数据</p>\n</blockquote>\n</li>\n<li><p>路径要尽量短</p>\n<blockquote>\n<p>所谓“路径”，就是用户发出请求到返回数据这个过程中，需求经过的中间的节点数。比如秒杀商品详情系统需要调用库存系统。解决多节点调用就是把RPC转换成服务内部调用。秒杀的缓存信息可以用本地缓存，<strong>如果用Redis做缓存组件的话会增加一次Socket连接</strong>。用本地缓存的话即减少了一次连接也符合<strong>路径要尽量短</strong>。使用了本地缓存动态数据需要更新就需要监听MQ来更新本地缓存的内容。</p>\n</blockquote>\n</li>\n<li><p>依赖要尽量少</p>\n<blockquote>\n<p>减少弱依赖，比如不显示优惠券相关非必要信息。最近各地政府都在号召：非必要不XXX</p>\n</blockquote>\n</li>\n<li><p>不要有单点</p>\n<blockquote>\n<p>系统中的单点可以说是系统架构上的一个大忌，因为单点意味着没有备份，风险不可控，我们设计分布式系统最重要的原则就是“消除单点”。</p>\n</blockquote>\n</li>\n</ol>\n<p>​\t\t越追求极致性能，系统定制开发就会越多，同时系统的通用性也就会越差。软件开发中有一句话是“细节是魔鬼”。</p>\n<h5 id=\"流量削峰怎么做\"><a href=\"#流量削峰怎么做\" class=\"headerlink\" title=\"流量削峰怎么做\"></a>流量削峰怎么做</h5><ul>\n<li><p>排队</p>\n<blockquote>\n<p>使用消息队列来缓存瞬间的峰值流量，把同步调用改成异步的调用，，中间通过一个队列在一端承接瞬时的流量洪峰，在另一端平滑地将消息推送出去</p>\n</blockquote>\n</li>\n<li><p>答题</p>\n<blockquote>\n<p>一是防止部分买家使用秒杀器在参加秒杀时作弊第二个目的其实就是延缓请求。秒杀答题的逻辑主要分为 3 部分。</p>\n</blockquote>\n</li>\n<li><p>分层过滤</p>\n<blockquote>\n<p>分层校验的目的是：在读系统中，尽量减少由于一致性校验带来的系统瓶颈，但是尽量将不影响性能的检查条件提前，如用户是否具有秒杀资格、商品状态是否正常、用户答题是否正确、秒杀是否已经结束、是否非法请求、营销等价物是否充足等；在写数据系统中，主要对写的数据（如“库存”）做一致性检查，最后在数据库层保证数据的最终准确性（如“库存”不能减为负数）。</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h5><h5 id=\"秒杀的一种实现方案\"><a href=\"#秒杀的一种实现方案\" class=\"headerlink\" title=\"秒杀的一种实现方案\"></a>秒杀的一种实现方案</h5><ol>\n<li>提前设置好秒杀商品缓存</li>\n<li>前端限流，3秒内只提交一个请求，静态资源存放于 CDN。</li>\n<li>后端 redis 对 uid 限流，同样 3 秒内提交一个请求。 </li>\n<li>请求保存队列，队列长度为库存 2 倍。防止前面预订失败，后面补上。</li>\n<li>队列满后，后续请求直接返回秒杀结束。</li>\n<li>消费线程消费队列内容，下订单，直接操作 MySQL 扣库存。</li>\n</ol>\n"},{"title":"关于分库分表的总结记录","date":"2023-03-15T07:11:41.000Z","banner_img":"https://cdn.wallpaperhub.app/cloudcache/e/9/e/a/3/d/e9ea3d767d495faba38e5a96d3502856b93480ec.jpg","index_img":"https://cdn.wallpaperhub.app/cloudcache/5/0/a/f/d/5/50afd52a90520bd017bee5d6e0fc416665e8f048.jpg","_content":"\n### 什么时候分库分表\n- 分库\n    - 磁盘读IO瓶颈，热点数据太多，数据库缓存放不下，每次查询时会产生大量的IO，降低查询速度 -> 分库和垂直分表。\n    - 网络IO瓶颈，请求的数据太多，网络带宽不够 -> 分库\n- 分表\n    - 单表数据量太大，查询时扫描的行太多，SQL效率低，CPU率先出现瓶颈 -> 水平分表\n\n### 概念\n- 水平分表\n    - 概念：以字段为依据，按照一定策略（hash、range等），将一个表中的数据拆分到多个表中\n    - 结果：每个表的结构都一样、每个表的数据都不一样，没有交集、所有表的并集是全量数据\n    - 场景：系统绝对并发量并没有上来，只是单表的数据量太多，影响了SQL效率，加重了CPU负担，以至于成为瓶颈\n    - 分析：表的数据量少了，单次SQL执行效率高，自然减轻了CPU的负担\n- 水平分库\n    - 概念：以字段为依据，按照一定策略（hash、range等），将一个库中的数据拆分到多个表中\n    - 结果：每个库的结构都一样、每个库的数据都不一样，没有交集、所有库的并集是全量数据\n    - 场景：系统绝对并发量上来了，分表难以根本上解决问题，并且还没有明显的业务归属来垂直分库\n    - 分析：库多了，io和cpu的压力自然可以成倍缓解\n- 垂直分库\n    - 概念：以表为依据，按照业务归属不同，将不同的表拆分到不同的库中\n    - 结果：每个库的结构都不一样、每个库的数据都不一样，没有交集、所有库的并集是全量数据\n    - 场景：系统绝对并发量上来了并且可以抽象出单独的业务模块\n    - 分析：可以对单库服务化\n- 垂直分表\n    - 概念：以字段为依据，按照字段的活跃性，将表中字段拆到不同的表（主表和扩展表）中\n    - 结果： 每个表的结构都不一样、一般来说，每个表的字段至少有一列交集，一般是主键，用于关联数据、所有表的并集是全量数据\n    - 场景：系统绝对并发量并没有上来，表的记录并不多，但是字段多，并且热点数据和非热点数据在一起，单行数据所需的存储空间较大。以至于数据库缓存的数据行减少，查询时会去读磁盘数据产生大量的随机读IO，产生IO瓶颈\n    - 分析：垂直分表的拆分原则是将热点数据（可能会冗余经常一起查询的数据）放在一起作为主表，非热点数据放在一起作为扩展表。这样更多的热点数据就能被缓存下来，进而减少了随机读IO\n\n\n\n","source":"_posts/mysql-sub.md","raw":"---\ntitle: 关于分库分表的总结记录\ndate: 2023-03-15 15:11:41\ntags: MySQL\ncategories:\n  - 技术笔记\n  - MySQL\nbanner_img: https://cdn.wallpaperhub.app/cloudcache/e/9/e/a/3/d/e9ea3d767d495faba38e5a96d3502856b93480ec.jpg\nindex_img: https://cdn.wallpaperhub.app/cloudcache/5/0/a/f/d/5/50afd52a90520bd017bee5d6e0fc416665e8f048.jpg\n---\n\n### 什么时候分库分表\n- 分库\n    - 磁盘读IO瓶颈，热点数据太多，数据库缓存放不下，每次查询时会产生大量的IO，降低查询速度 -> 分库和垂直分表。\n    - 网络IO瓶颈，请求的数据太多，网络带宽不够 -> 分库\n- 分表\n    - 单表数据量太大，查询时扫描的行太多，SQL效率低，CPU率先出现瓶颈 -> 水平分表\n\n### 概念\n- 水平分表\n    - 概念：以字段为依据，按照一定策略（hash、range等），将一个表中的数据拆分到多个表中\n    - 结果：每个表的结构都一样、每个表的数据都不一样，没有交集、所有表的并集是全量数据\n    - 场景：系统绝对并发量并没有上来，只是单表的数据量太多，影响了SQL效率，加重了CPU负担，以至于成为瓶颈\n    - 分析：表的数据量少了，单次SQL执行效率高，自然减轻了CPU的负担\n- 水平分库\n    - 概念：以字段为依据，按照一定策略（hash、range等），将一个库中的数据拆分到多个表中\n    - 结果：每个库的结构都一样、每个库的数据都不一样，没有交集、所有库的并集是全量数据\n    - 场景：系统绝对并发量上来了，分表难以根本上解决问题，并且还没有明显的业务归属来垂直分库\n    - 分析：库多了，io和cpu的压力自然可以成倍缓解\n- 垂直分库\n    - 概念：以表为依据，按照业务归属不同，将不同的表拆分到不同的库中\n    - 结果：每个库的结构都不一样、每个库的数据都不一样，没有交集、所有库的并集是全量数据\n    - 场景：系统绝对并发量上来了并且可以抽象出单独的业务模块\n    - 分析：可以对单库服务化\n- 垂直分表\n    - 概念：以字段为依据，按照字段的活跃性，将表中字段拆到不同的表（主表和扩展表）中\n    - 结果： 每个表的结构都不一样、一般来说，每个表的字段至少有一列交集，一般是主键，用于关联数据、所有表的并集是全量数据\n    - 场景：系统绝对并发量并没有上来，表的记录并不多，但是字段多，并且热点数据和非热点数据在一起，单行数据所需的存储空间较大。以至于数据库缓存的数据行减少，查询时会去读磁盘数据产生大量的随机读IO，产生IO瓶颈\n    - 分析：垂直分表的拆分原则是将热点数据（可能会冗余经常一起查询的数据）放在一起作为主表，非热点数据放在一起作为扩展表。这样更多的热点数据就能被缓存下来，进而减少了随机读IO\n\n\n\n","slug":"mysql-sub","published":1,"updated":"2023-03-15T09:32:01.038Z","_id":"clf9hgpcu00001yfydzby4ssa","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"什么时候分库分表\"><a href=\"#什么时候分库分表\" class=\"headerlink\" title=\"什么时候分库分表\"></a>什么时候分库分表</h3><ul>\n<li>分库<ul>\n<li>磁盘读IO瓶颈，热点数据太多，数据库缓存放不下，每次查询时会产生大量的IO，降低查询速度 -&gt; 分库和垂直分表。</li>\n<li>网络IO瓶颈，请求的数据太多，网络带宽不够 -&gt; 分库</li>\n</ul>\n</li>\n<li>分表<ul>\n<li>单表数据量太大，查询时扫描的行太多，SQL效率低，CPU率先出现瓶颈 -&gt; 水平分表</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><ul>\n<li>水平分表<ul>\n<li>概念：以字段为依据，按照一定策略（hash、range等），将一个表中的数据拆分到多个表中</li>\n<li>结果：每个表的结构都一样、每个表的数据都不一样，没有交集、所有表的并集是全量数据</li>\n<li>场景：系统绝对并发量并没有上来，只是单表的数据量太多，影响了SQL效率，加重了CPU负担，以至于成为瓶颈</li>\n<li>分析：表的数据量少了，单次SQL执行效率高，自然减轻了CPU的负担</li>\n</ul>\n</li>\n<li>水平分库<ul>\n<li>概念：以字段为依据，按照一定策略（hash、range等），将一个库中的数据拆分到多个表中</li>\n<li>结果：每个库的结构都一样、每个库的数据都不一样，没有交集、所有库的并集是全量数据</li>\n<li>场景：系统绝对并发量上来了，分表难以根本上解决问题，并且还没有明显的业务归属来垂直分库</li>\n<li>分析：库多了，io和cpu的压力自然可以成倍缓解</li>\n</ul>\n</li>\n<li>垂直分库<ul>\n<li>概念：以表为依据，按照业务归属不同，将不同的表拆分到不同的库中</li>\n<li>结果：每个库的结构都不一样、每个库的数据都不一样，没有交集、所有库的并集是全量数据</li>\n<li>场景：系统绝对并发量上来了并且可以抽象出单独的业务模块</li>\n<li>分析：可以对单库服务化</li>\n</ul>\n</li>\n<li>垂直分表<ul>\n<li>概念：以字段为依据，按照字段的活跃性，将表中字段拆到不同的表（主表和扩展表）中</li>\n<li>结果： 每个表的结构都不一样、一般来说，每个表的字段至少有一列交集，一般是主键，用于关联数据、所有表的并集是全量数据</li>\n<li>场景：系统绝对并发量并没有上来，表的记录并不多，但是字段多，并且热点数据和非热点数据在一起，单行数据所需的存储空间较大。以至于数据库缓存的数据行减少，查询时会去读磁盘数据产生大量的随机读IO，产生IO瓶颈</li>\n<li>分析：垂直分表的拆分原则是将热点数据（可能会冗余经常一起查询的数据）放在一起作为主表，非热点数据放在一起作为扩展表。这样更多的热点数据就能被缓存下来，进而减少了随机读IO</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"wordcount":873,"excerpt":"","more":"<h3 id=\"什么时候分库分表\"><a href=\"#什么时候分库分表\" class=\"headerlink\" title=\"什么时候分库分表\"></a>什么时候分库分表</h3><ul>\n<li>分库<ul>\n<li>磁盘读IO瓶颈，热点数据太多，数据库缓存放不下，每次查询时会产生大量的IO，降低查询速度 -&gt; 分库和垂直分表。</li>\n<li>网络IO瓶颈，请求的数据太多，网络带宽不够 -&gt; 分库</li>\n</ul>\n</li>\n<li>分表<ul>\n<li>单表数据量太大，查询时扫描的行太多，SQL效率低，CPU率先出现瓶颈 -&gt; 水平分表</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><ul>\n<li>水平分表<ul>\n<li>概念：以字段为依据，按照一定策略（hash、range等），将一个表中的数据拆分到多个表中</li>\n<li>结果：每个表的结构都一样、每个表的数据都不一样，没有交集、所有表的并集是全量数据</li>\n<li>场景：系统绝对并发量并没有上来，只是单表的数据量太多，影响了SQL效率，加重了CPU负担，以至于成为瓶颈</li>\n<li>分析：表的数据量少了，单次SQL执行效率高，自然减轻了CPU的负担</li>\n</ul>\n</li>\n<li>水平分库<ul>\n<li>概念：以字段为依据，按照一定策略（hash、range等），将一个库中的数据拆分到多个表中</li>\n<li>结果：每个库的结构都一样、每个库的数据都不一样，没有交集、所有库的并集是全量数据</li>\n<li>场景：系统绝对并发量上来了，分表难以根本上解决问题，并且还没有明显的业务归属来垂直分库</li>\n<li>分析：库多了，io和cpu的压力自然可以成倍缓解</li>\n</ul>\n</li>\n<li>垂直分库<ul>\n<li>概念：以表为依据，按照业务归属不同，将不同的表拆分到不同的库中</li>\n<li>结果：每个库的结构都不一样、每个库的数据都不一样，没有交集、所有库的并集是全量数据</li>\n<li>场景：系统绝对并发量上来了并且可以抽象出单独的业务模块</li>\n<li>分析：可以对单库服务化</li>\n</ul>\n</li>\n<li>垂直分表<ul>\n<li>概念：以字段为依据，按照字段的活跃性，将表中字段拆到不同的表（主表和扩展表）中</li>\n<li>结果： 每个表的结构都不一样、一般来说，每个表的字段至少有一列交集，一般是主键，用于关联数据、所有表的并集是全量数据</li>\n<li>场景：系统绝对并发量并没有上来，表的记录并不多，但是字段多，并且热点数据和非热点数据在一起，单行数据所需的存储空间较大。以至于数据库缓存的数据行减少，查询时会去读磁盘数据产生大量的随机读IO，产生IO瓶颈</li>\n<li>分析：垂直分表的拆分原则是将热点数据（可能会冗余经常一起查询的数据）放在一起作为主表，非热点数据放在一起作为扩展表。这样更多的热点数据就能被缓存下来，进而减少了随机读IO</li>\n</ul>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clf9h81dq0006qmfybpvdhcao","category_id":"clf9h81dm0003qmfy36hs8nks","_id":"clf9h81e0000nqmfy3psnb7i2"},{"post_id":"clf9h81dq0006qmfybpvdhcao","category_id":"clf9h81dy000hqmfy35an4s28","_id":"clf9h81e1000qqmfy3vzrgfn9"},{"post_id":"clf9h81da0001qmfy4h3b2qwu","category_id":"clf9h81dm0003qmfy36hs8nks","_id":"clf9h81e2000tqmfy8sn59pb3"},{"post_id":"clf9h81da0001qmfy4h3b2qwu","category_id":"clf9h81dz000kqmfy1uuh8nth","_id":"clf9h81e2000uqmfy3p4e8c3p"},{"post_id":"clf9h81dr0007qmfy930x89sh","category_id":"clf9h81dm0003qmfy36hs8nks","_id":"clf9h81e3000xqmfy6fwvf3gk"},{"post_id":"clf9h81dr0007qmfy930x89sh","category_id":"clf9h81dy000hqmfy35an4s28","_id":"clf9h81e3000yqmfyd6sz039o"},{"post_id":"clf9h81du000bqmfydjdn3xdo","category_id":"clf9h81dm0003qmfy36hs8nks","_id":"clf9h81e3000zqmfyfgjcfwyq"},{"post_id":"clf9h81du000bqmfydjdn3xdo","category_id":"clf9h81dy000hqmfy35an4s28","_id":"clf9h81e40011qmfy39c49kdo"},{"post_id":"clf9h81dk0002qmfyblgfcn70","category_id":"clf9h81dm0003qmfy36hs8nks","_id":"clf9h81e40013qmfybam27t0j"},{"post_id":"clf9h81dk0002qmfyblgfcn70","category_id":"clf9h81e3000wqmfyhxojdaw1","_id":"clf9h81e40014qmfyhsm7fnef"},{"post_id":"clf9h81dv000cqmfyfyhsexdm","category_id":"clf9h81dm0003qmfy36hs8nks","_id":"clf9h81e50015qmfy9g58cpxt"},{"post_id":"clf9h81dv000cqmfyfyhsexdm","category_id":"clf9h81dy000hqmfy35an4s28","_id":"clf9h81e50017qmfy4f0m3aw9"},{"post_id":"clf9h81dx000fqmfy205n3qvk","category_id":"clf9h81e40012qmfy4n2h149n","_id":"clf9h81e50018qmfy5fbi8dwh"},{"post_id":"clf9h81dp0005qmfyfh1g2oaz","category_id":"clf9h81dm0003qmfy36hs8nks","_id":"clf9h81e50019qmfya745bnug"},{"post_id":"clf9h81dp0005qmfyfh1g2oaz","category_id":"clf9h81e3000wqmfyhxojdaw1","_id":"clf9h81e5001aqmfyai8q1fut"},{"post_id":"clf9hgpcu00001yfydzby4ssa","category_id":"clf9h81dm0003qmfy36hs8nks","_id":"clf9hgpd600021yfy565f3abl"},{"post_id":"clf9hgpcu00001yfydzby4ssa","category_id":"clf9h81e3000wqmfyhxojdaw1","_id":"clf9hgpd600031yfy6ruvdvj0"}],"PostTag":[{"post_id":"clf9h81da0001qmfy4h3b2qwu","tag_id":"clf9h81do0004qmfyh8ry54t7","_id":"clf9h81du000aqmfyhsu5fivu"},{"post_id":"clf9h81dk0002qmfyblgfcn70","tag_id":"clf9h81ds0009qmfybbk67ubw","_id":"clf9h81dy000gqmfydaow48y2"},{"post_id":"clf9h81dp0005qmfyfh1g2oaz","tag_id":"clf9h81dw000eqmfy3a3u49jt","_id":"clf9h81dz000jqmfy0jzsh2wv"},{"post_id":"clf9h81dr0007qmfy930x89sh","tag_id":"clf9h81dz000iqmfy0vvqgk84","_id":"clf9h81e0000mqmfyfvfsawya"},{"post_id":"clf9h81du000bqmfydjdn3xdo","tag_id":"clf9h81dz000iqmfy0vvqgk84","_id":"clf9h81e1000rqmfyh1cdfu7b"},{"post_id":"clf9h81dv000cqmfyfyhsexdm","tag_id":"clf9h81dz000iqmfy0vvqgk84","_id":"clf9h81e3000vqmfy2cwaeazw"},{"post_id":"clf9hgpcu00001yfydzby4ssa","tag_id":"clf9hgpd200011yfy780l9o3w","_id":"clf9hgpd600041yfya8852wfd"}],"Tag":[{"name":"设计模式","_id":"clf9h81do0004qmfyh8ry54t7"},{"name":"MySQL,Lock","_id":"clf9h81ds0009qmfybbk67ubw"},{"name":"MySQL,索引","_id":"clf9h81dw000eqmfy3a3u49jt"},{"name":"网络","_id":"clf9h81dz000iqmfy0vvqgk84"},{"name":"MySQL","_id":"clf9hgpd200011yfy780l9o3w"}]}}